--- a/src/twisted/web/client.py
+++ b/src/twisted/web/client.py
@@ -2141,6 +2141,8 @@
     ]
     _seeOtherResponses = [http.SEE_OTHER]
 
+    SENSITIVE_HEADERS = {b"cookie", b"authorization", b"proxy-authorization"}
+
     def __init__(self, agent, redirectLimit=20):
         self._agent = agent
         self._redirectLimit = redirectLimit
@@ -2186,7 +2188,20 @@
             )
             raise ResponseFailed([Failure(err)], response)
         location = self._resolveLocation(uri, locationHeaders[0])
-        deferred = self._agent.request(method, location, headers)
+        
+        # Check if redirect is cross-origin and filter sensitive headers
+        original_uri = URI.fromBytes(uri)
+        new_uri = URI.fromBytes(location)
+        is_cross_origin = (original_uri.scheme, original_uri.host, original_uri.port) != (new_uri.scheme, new_uri.host, new_uri.port)
+        
+        if is_cross_origin:
+            new_headers = headers.copy()
+            for header in self.SENSITIVE_HEADERS:
+                new_headers.removeHeader(header)
+        else:
+            new_headers = headers
+        
+        deferred = self._agent.request(method, location, new_headers)
 
         def _chainResponse(newResponse):
             newResponse.setPreviousResponse(response)
@@ -2194,7 +2209,7 @@
 
         deferred.addCallback(_chainResponse)
         return deferred.addCallback(
-            self._handleResponse, method, uri, headers, redirectCount + 1
+            self._handleResponse, method, location, new_headers, redirectCount + 1
         )
 
     def _handleResponse(self, response, method, uri, headers, redirectCount):

