--- a/superset/jinja_context.py
+++ b/superset/jinja_context.py
@@ -397,19 +397,20 @@
     return validate_context_types(context)
 
 
-def where_in(values: list[Any], mark: str = "'") -> str:
+def where_in(values: list[Any], dialect: Dialect) -> str:
     """
     Given a list of values, build a parenthesis list suitable for an IN expression.
 
-        >>> where_in([1, "b", 3])
+        >>> where_in([1, "b", 3], dialect=some_dialect)
         (1, 'b', 3)
 
     """
+    from sqlalchemy.types import String
 
     def quote(value: Any) -> str:
         if isinstance(value, str):
-            value = value.replace(mark, mark * 2)
-            return f"{mark}{value}{mark}"
+            # Use dialect-specific escaping for strings
+            return String().literal_processor(dialect=dialect)(value)
         return str(value)
 
     joined_values = ", ".join(quote(value) for value in values)
@@ -449,7 +450,11 @@
         self.set_context(**kwargs)
 
         # custom filters
-        self._env.filters["where_in"] = where_in
+        from functools import partial  # Already imported at top, but explicit for clarity
+        self._env.filters["where_in"] = partial(
+            where_in, 
+            dialect=self._database.get_dialect()
+        )
 
     def set_context(self, **kwargs: Any) -> None:
         self._context.update(kwargs)

