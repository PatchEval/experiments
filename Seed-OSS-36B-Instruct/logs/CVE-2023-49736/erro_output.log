[PoC RESULT]: False
[PoC MSG]:
============================== Run PoC ==============================
------------------------------ Standard Output ------------------------------
============================= test session starts ==============================
platform linux -- Python 3.10.16, pytest-7.3.1, pluggy-1.2.0 -- /workspace/PoC_env/CVE-2023-49736/bin/python
cachedir: .pytest_cache
rootdir: /workspace/superset
configfile: pytest.ini
plugins: mock-3.10.0, pyfakefs-5.2.2, cov-4.0.0
collecting ... collected 0 items / 1 error

==================================== ERRORS ====================================
___________ ERROR collecting tests/unit_tests/jinja_context_test.py ____________
ImportError while importing test module '/workspace/superset/tests/unit_tests/jinja_context_test.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/miniconda3/envs/py_310/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/unit_tests/jinja_context_test.py:26: in <module>
    from superset.jinja_context import dataset_macro, WhereInMacro
E   ImportError: cannot import name 'WhereInMacro' from 'superset.jinja_context' (/workspace/superset/superset/jinja_context.py)
------------------------------- Captured stderr --------------------------------
Debug mode identified with default secret key
--------------------------------------------------------------------------------
                                    WARNING
--------------------------------------------------------------------------------
A Default SECRET_KEY was detected, please use superset_config.py to override it.
Use a strong complex alphanumeric string and use a tool to help you generate 
a sufficiently random sequence, ex: openssl rand -base64 42
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
logging was configured successfully
2025-10-30 12:25:16,171:INFO:superset.utils.logging_configurator:logging was configured successfully
2025-10-30 12:25:16,176:INFO:root:Configured event logger of type <class 'superset.utils.log.DBEventLogger'>
=============================== warnings summary ===============================
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/wtforms/ext/sqlalchemy/__init__.py:3
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/wtforms/ext/sqlalchemy/__init__.py:3: DeprecationWarning: 'wtforms.ext.sqlalchemy' will be removed in WTForms 3.0. Use WTForms-SQLAlchemy https://github.com/wtforms/wtforms-sqlalchemy or WTForms-Alchemy https://github.com/kvesteri/wtforms-alchemy instead.
    warnings.warn(

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_sqlalchemy/__init__.py:14
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_sqlalchemy/__init__.py:14
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_sqlalchemy/__init__.py:14: DeprecationWarning: '_app_ctx_stack' is deprecated and will be removed in Flask 2.3.
    from flask import _app_ctx_stack, abort, current_app, request

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_appbuilder/filemanager.py:7
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_appbuilder/filemanager.py:7: DeprecationWarning: '_request_ctx_stack' is deprecated and will be removed in Flask 2.3.
    from flask.globals import _request_ctx_stack

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_appbuilder/filemanager.py:13
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_appbuilder/filemanager.py:13
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_appbuilder/filemanager.py:13: DeprecationWarning: '_app_ctx_stack' is deprecated and will be removed in Flask 2.3.
    from flask import _app_ctx_stack

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_appbuilder/widgets.py:9
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_appbuilder/widgets.py:9: DeprecationWarning: '_request_ctx_stack' is deprecated and will be removed in Flask 2.3.
    from flask.globals import _request_ctx_stack

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_jwt_extended/utils.py:2
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_jwt_extended/utils.py:2
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_jwt_extended/utils.py:2: DeprecationWarning: '_request_ctx_stack' is deprecated and will be removed in Flask 2.3.
    from flask import _request_ctx_stack

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py:6
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py:6
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_jwt_extended/view_decorators.py:6: DeprecationWarning: '_request_ctx_stack' is deprecated and will be removed in Flask 2.3.
    from flask import _request_ctx_stack

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_login/login_manager.py:5
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_login/login_manager.py:5
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_login/login_manager.py:5: DeprecationWarning: '_request_ctx_stack' is deprecated and will be removed in Flask 2.3.
    from flask import _request_ctx_stack

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_login/utils.py:7
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_login/utils.py:7
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_login/utils.py:7: DeprecationWarning: '_request_ctx_stack' is deprecated and will be removed in Flask 2.3.
    from flask import _request_ctx_stack

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/markdown/util.py:87
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/markdown/util.py:87: DeprecationWarning: SelectableGroups dict interface is deprecated. Use select.
    INSTALLED_EXTENSIONS = metadata.entry_points().get('markdown.extensions', ())

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/kombu/utils/compat.py:82
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/kombu/utils/compat.py:82: DeprecationWarning: SelectableGroups dict interface is deprecated. Use select.
    for ep in importlib_metadata.entry_points().get(namespace, [])

superset/config.py:26
  /workspace/superset/superset/config.py:26: DeprecationWarning: the imp module is deprecated in favour of importlib and slated for removal in Python 3.12; see the module's documentation for alternative uses
    import imp  # pylint: disable=deprecated-module

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_limiter/extension.py:293
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_limiter/extension.py:293: UserWarning: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.
    warnings.warn(

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_appbuilder/security/sqla/manager.py:107
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/flask_appbuilder/security/sqla/manager.py:107: SADeprecationWarning: The from_engine() method on Inspector is deprecated and will be removed in a future release.  Please use the sqlalchemy.inspect() function on an Engine or Connection in order to acquire an Inspector. (deprecated since: 1.4)
    inspector = Inspector.from_engine(engine)

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/sqlalchemy_utils/types/encrypted/encrypted_type.py:463
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/sqlalchemy_utils/types/encrypted/encrypted_type.py:463
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/sqlalchemy_utils/types/encrypted/encrypted_type.py:463
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/sqlalchemy_utils/types/encrypted/encrypted_type.py:463
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/sqlalchemy_utils/types/encrypted/encrypted_type.py:463
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/sqlalchemy_utils/types/encrypted/encrypted_type.py:463
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/sqlalchemy_utils/types/encrypted/encrypted_type.py:463
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/sqlalchemy_utils/types/encrypted/encrypted_type.py:463: DeprecationWarning: The 'EncryptedType' class will change implementation from 'LargeBinary' to 'String' in a future version. Use 'StringEncryptedType' to use the 'String' implementation.
    warnings.warn(

superset/viz.py:2807
  /workspace/superset/superset/viz.py:2807: DeprecatedWarning: get_subclasses is deprecated as of 3.0.
    for o in get_subclasses(BaseViz)

superset/viz.py:2801: 37 warnings
  /workspace/superset/superset/viz.py:2801: DeprecatedWarning: get_subclasses is deprecated as of 3.0.
    [sc for c in cls.__subclasses__() for sc in get_subclasses(c)]

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:755
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:755
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:755: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'minLength': 1}
    super().__init__(**kwargs)

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:949
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:949: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'min': 0}
    super().__init__(**kwargs)

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:949
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:949
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:949: RemovedInMarshmallow4Warning: The 'default' argument to fields is deprecated. Use 'dump_default' instead.
    super().__init__(**kwargs)

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:949
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:949
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:949: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'Unique if of rls filter'}
    super().__init__(**kwargs)

superset/row_level_security/schemas.py:54
  /workspace/superset/superset/row_level_security/schemas.py:54: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'Name of rls filter'}
    name = fields.String(description=name_description)

superset/row_level_security/schemas.py:55
  /workspace/superset/superset/row_level_security/schemas.py:55: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'Regular filters add where clauses to queries if a user belongs to a role referenced in the filter, base filters apply filters to all queries except the roles defined in the filter, and can be used to define what users can see if no RLS filters within a filter group apply to them.'}
    filter_type = fields.String(

superset/row_level_security/schemas.py:63
  /workspace/superset/superset/row_level_security/schemas.py:63: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'This is the condition that will be added to the WHERE clause. For example, to only return rows for a particular client, you might define a regular filter with the clause `client_id = 9`. To display no rows unless a user belongs to a RLS filter role, a base filter can be created with the clause `1 = 0` (always false).'}
    clause = fields.String(description=clause_description)

superset/row_level_security/schemas.py:67
  /workspace/superset/superset/row_level_security/schemas.py:67: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': "Filters with the same group key will be ORed together within the group, while different filter groups will be ANDed together. Undefined group keys are treated as unique groups, i.e. are not grouped together. For example, if a table has three filters, of which two are for departments Finance and Marketing (group key = 'department'), and one refers to the region Europe (group key = 'region'), the filter clause would apply the filter (department = 'Finance' OR department = 'Marketing') AND (region = 'Europe')."}
    group_key = fields.String(description=group_key_description)

superset/row_level_security/schemas.py:68
  /workspace/superset/superset/row_level_security/schemas.py:68: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'Detailed description'}
    description = fields.String(description=description_description)

superset/row_level_security/schemas.py:73
  /workspace/superset/superset/row_level_security/schemas.py:73: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'Name of rls filter'}
    name = fields.String(description=name_description)

superset/row_level_security/schemas.py:74
  /workspace/superset/superset/row_level_security/schemas.py:74: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'Regular filters add where clauses to queries if a user belongs to a role referenced in the filter, base filters apply filters to all queries except the roles defined in the filter, and can be used to define what users can see if no RLS filters within a filter group apply to them.'}
    filter_type = fields.String(

superset/row_level_security/schemas.py:82
  /workspace/superset/superset/row_level_security/schemas.py:82: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'This is the condition that will be added to the WHERE clause. For example, to only return rows for a particular client, you might define a regular filter with the clause `client_id = 9`. To display no rows unless a user belongs to a RLS filter role, a base filter can be created with the clause `1 = 0` (always false).'}
    clause = fields.String(description=clause_description)

superset/row_level_security/schemas.py:83
  /workspace/superset/superset/row_level_security/schemas.py:83: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': "Filters with the same group key will be ORed together within the group, while different filter groups will be ANDed together. Undefined group keys are treated as unique groups, i.e. are not grouped together. For example, if a table has three filters, of which two are for departments Finance and Marketing (group key = 'department'), and one refers to the region Europe (group key = 'region'), the filter clause would apply the filter (department = 'Finance' OR department = 'Marketing') AND (region = 'Europe')."}
    group_key = fields.String(description=group_key_description)

superset/row_level_security/schemas.py:84
  /workspace/superset/superset/row_level_security/schemas.py:84: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'Detailed description'}
    description = fields.String(description=description_description)

superset/row_level_security/schemas.py:88
  /workspace/superset/superset/row_level_security/schemas.py:88: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'Name of rls filter'}
    name = fields.String(

superset/row_level_security/schemas.py:94
  /workspace/superset/superset/row_level_security/schemas.py:94: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'Detailed description'}
    description = fields.String(

superset/row_level_security/schemas.py:97
  /workspace/superset/superset/row_level_security/schemas.py:97: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'Regular filters add where clauses to queries if a user belongs to a role referenced in the filter, base filters apply filters to all queries except the roles defined in the filter, and can be used to define what users can see if no RLS filters within a filter group apply to them.'}
    filter_type = fields.String(

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:755
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:755
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:755: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'These are the tables this filter will be applied to.'}
    super().__init__(**kwargs)

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:755
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:755
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:755: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'For regular filters, these are the roles this filter will be applied to. For base filters, these are the roles that the filter DOES NOT apply to, e.g. Admin if admin should see all data.'}
    super().__init__(**kwargs)

superset/row_level_security/schemas.py:115
  /workspace/superset/superset/row_level_security/schemas.py:115: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': "Filters with the same group key will be ORed together within the group, while different filter groups will be ANDed together. Undefined group keys are treated as unique groups, i.e. are not grouped together. For example, if a table has three filters, of which two are for departments Finance and Marketing (group key = 'department'), and one refers to the region Europe (group key = 'region'), the filter clause would apply the filter (department = 'Finance' OR department = 'Marketing') AND (region = 'Europe')."}
    group_key = fields.String(

superset/row_level_security/schemas.py:118
  /workspace/superset/superset/row_level_security/schemas.py:118: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'This is the condition that will be added to the WHERE clause. For example, to only return rows for a particular client, you might define a regular filter with the clause `client_id = 9`. To display no rows unless a user belongs to a RLS filter role, a base filter can be created with the clause `1 = 0` (always false).'}
    clause = fields.String(

superset/row_level_security/schemas.py:124
  /workspace/superset/superset/row_level_security/schemas.py:124: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'Name of rls filter'}
    name = fields.String(

superset/row_level_security/schemas.py:130
  /workspace/superset/superset/row_level_security/schemas.py:130: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'Detailed description'}
    description = fields.String(

superset/row_level_security/schemas.py:133
  /workspace/superset/superset/row_level_security/schemas.py:133: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'Regular filters add where clauses to queries if a user belongs to a role referenced in the filter, base filters apply filters to all queries except the roles defined in the filter, and can be used to define what users can see if no RLS filters within a filter group apply to them.'}
    filter_type = fields.String(

superset/row_level_security/schemas.py:153
  /workspace/superset/superset/row_level_security/schemas.py:153: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': "Filters with the same group key will be ORed together within the group, while different filter groups will be ANDed together. Undefined group keys are treated as unique groups, i.e. are not grouped together. For example, if a table has three filters, of which two are for departments Finance and Marketing (group key = 'department'), and one refers to the region Europe (group key = 'region'), the filter clause would apply the filter (department = 'Finance' OR department = 'Marketing') AND (region = 'Europe')."}
    group_key = fields.String(

superset/row_level_security/schemas.py:156
  /workspace/superset/superset/row_level_security/schemas.py:156: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'description': 'This is the condition that will be added to the WHERE clause. For example, to only return rows for a particular client, you might define a regular filter with the clause `client_id = 9`. To display no rows unless a user belongs to a RLS filter role, a base filter can be created with the clause `1 = 0` (always false).'}
    clause = fields.String(

../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:949
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:949
../PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:949
  /workspace/PoC_env/CVE-2023-49736/lib/python3.10/site-packages/marshmallow/fields.py:949: RemovedInMarshmallow4Warning: Passing field metadata as keyword arguments is deprecated. Use the explicit `metadata=...` argument instead. Additional metadata: {'places': None}
    super().__init__(**kwargs)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
ERROR tests/unit_tests/jinja_context_test.py
======================== 99 warnings, 1 error in 0.14s =========================

------------------------------ Standard Error ------------------------------
ERROR: not found: /workspace/superset/tests/unit_tests/jinja_context_test.py::test_where_in
(no name '/workspace/superset/tests/unit_tests/jinja_context_test.py::test_where_in' in any of [<Module jinja_context_test.py>])


------------------------------ Finish Evaluation ------------------------------


[UnitTest RESULT]: None
[UnitTest MSG]:
 None

[Validation TYPE]: validation_fail