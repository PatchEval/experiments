--- a/django/core/files/storage/base.py
+++ b/django/core/files/storage/base.py
@@ -34,6 +34,8 @@
         if not hasattr(content, "chunks"):
             content = File(content, name)
 
+        # Validate filename before availability check (critical for path traversal protection)
+        name = self.generate_filename(name)
         name = self.get_available_name(name, max_length=max_length)
         name = self._save(name, content)
         # Ensure that the name returned from the storage system is still valid.

--- a/django/core/files/utils.py
+++ b/django/core/files/utils.py
@@ -9,14 +9,20 @@
     if os.path.basename(name) in {"", ".", ".."}:
         raise SuspiciousFileOperation("Could not derive file name from '%s'" % name)
 
+    # Always check for path traversal in relative paths (even when not explicitly allowed)
+    path = pathlib.PurePosixPath(name)
+    if ".." in path.parts:
+        raise SuspiciousFileOperation(
+            "Detected path traversal attempt in '%s'" % name
+        )
+
     if allow_relative_path:
         # Use PurePosixPath() because this branch is checked only in
         # FileField.generate_filename() where all file paths are expected to be
         # Unix style (with forward slashes).
-        path = pathlib.PurePosixPath(name)
-        if path.is_absolute() or ".." in path.parts:
+        if path.is_absolute():
             raise SuspiciousFileOperation(
-                "Detected path traversal attempt in '%s'" % name
+                "Detected absolute path attempt in '%s'" % name
             )
     elif name != os.path.basename(name):
         raise SuspiciousFileOperation("File name '%s' includes path elements" % name)

