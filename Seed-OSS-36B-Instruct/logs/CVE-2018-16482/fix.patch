--- a/lib/staticFileHandler.js
+++ b/lib/staticFileHandler.js
@@ -13,15 +13,26 @@
     assert(options.deleteMockPaths,'A delete mock path object must be defined');
 
     return function(req,res){
-        var root = options.root;
+        var root = path.resolve(options.root);
         var mockPaths = getMockPathForMethod(options,req.method);
 
         var filePath = httpHelpers.getRequestPathFromUrl(req.url);
+        // Decode URL-encoded characters to handle spaces and encoded traversal attempts
+        try {
+            filePath = decodeURIComponent(filePath);
+        } catch (err) {
+            return statusHandlers[400](res, nextHandler, { error: 'Invalid URL encoding' });
+        }
         var mockedFilePath = findMockFilePath(filePath,mockPaths);
         if(mockedFilePath)
             filePath = mockedFilePath;
 
-        var file = path.normalize(path.join(root,filePath));
+        var file = path.resolve(root, filePath);
+        // Check if file is outside restricted directory to prevent path traversal
+        var relativePath = path.relative(root, file);
+        if (relativePath.startsWith('..')) {
+            return statusHandlers[403](res, nextHandler, { error: 'Path traversal attempt' });
+        }
         fs.stat(file,function(error, stats){
             if(error)
                 return statusHandlers[500](res, nextHandler, { error: error });

