--- a/pkg/templates/signer/tmpl_signer.go
+++ b/pkg/templates/signer/tmpl_signer.go
@@ -28,10 +28,13 @@
 )
 
 func RemoveSignatureFromData(data []byte) []byte {
-	return bytes.Trim(ReDigest.ReplaceAll(data, []byte("")), "\n")
+	// Normalize newlines to LF before processing to ensure consistent signature generation/verification
+	normalized := bytes.ReplaceAll(data, []byte("\r\n"), []byte("\n"))
+	return bytes.Trim(ReDigest.ReplaceAll(normalized, []byte("")), "\n")
 }
 
 func GetSignatureFromData(data []byte) []byte {
+	// Find signature while preserving original newline handling
 	return ReDigest.Find(data)
 }
 
@@ -88,16 +91,22 @@
 		}
 	}
 
-	buff := bytes.NewBuffer(RemoveSignatureFromData(data))
-	// if file has any imports process them
+	// Normalize newlines to LF before processing to ensure consistent signature generation/verification
+	normalizedData := bytes.ReplaceAll(data, []byte("\r\n"), []byte("\n"))
+	buff := bytes.NewBuffer(RemoveSignatureFromData(normalizedData))
+	
+	// Process file imports with consistent newline handling
 	for _, file := range tmpl.GetFileImports() {
 		bin, err := os.ReadFile(file)
 		if err != nil {
 			return "", err
 		}
+		// Normalize imported file content newlines too
+		normalizedBin := bytes.ReplaceAll(bin, []byte("\r\n"), []byte("\n"))
 		buff.WriteRune('\n')
-		buff.Write(bin)
-	}
+		buff.Write(normalizedBin)
+	}
+	
 	signatureData, err := t.sign(buff.Bytes())
 	if err != nil {
 		return "", err
@@ -136,15 +145,20 @@
 		return false, err
 	}
 
-	buff := bytes.NewBuffer(RemoveSignatureFromData(data))
-	// if file has any imports process them
+	// Normalize newlines to LF before processing to ensure consistent signature verification
+	normalizedData := bytes.ReplaceAll(data, []byte("\r\n"), []byte("\n"))
+	buff := bytes.NewBuffer(RemoveSignatureFromData(normalizedData))
+	
+	// Process file imports with consistent newline handling (same as Sign method)
 	for _, file := range tmpl.GetFileImports() {
 		bin, err := os.ReadFile(file)
 		if err != nil {
 			return false, err
 		}
+		// Normalize imported file content newlines too
+		normalizedBin := bytes.ReplaceAll(bin, []byte("\r\n"), []byte("\n"))
 		buff.WriteRune('\n')
-		buff.Write(bin)
+		buff.Write(normalizedBin)
 	}
 
 	return t.verify(buff.Bytes(), digest)

