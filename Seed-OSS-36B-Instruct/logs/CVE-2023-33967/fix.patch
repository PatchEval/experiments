--- a/probe/client/mysql/mysql.go
+++ b/probe/client/mysql/mysql.go
@@ -108,12 +108,12 @@
 	if len(r.Data) > 0 {
 		for k, v := range r.Data {
 			log.Debugf("[%s / %s / %s] - Verifying Data - [%s] : [%s]", r.ProbeKind, r.ProbeName, r.ProbeTag, k, v)
-			sql, err := r.getSQL(k)
+			sql, param, err := r.getSQL(k)
 			if err != nil {
 				return false, err.Error()
 			}
-			log.Debugf("[%s / %s / %s] - SQL - [%s]", r.ProbeKind, r.ProbeName, r.ProbeTag, sql)
-			rows, err := db.Query(sql)
+			log.Debugf("[%s / %s / %s] - SQL - [%s] (param: %v)", r.ProbeKind, r.ProbeName, r.ProbeTag, sql, param)
+			rows, err := db.Query(sql, param)
 			if err != nil {
 				return false, err.Error()
 			}
@@ -153,24 +153,28 @@
 // getSQL get the SQL statement
 // input: database:table:column:key:value
 // output: SELECT column FROM database.table WHERE key = value
-func (r *MySQL) getSQL(str string) (string, error) {
+func (r *MySQL) getSQL(str string) (string, interface{}, error) {
 	if len(strings.TrimSpace(str)) == 0 {
-		return "", fmt.Errorf("Empty SQL data")
+		return "", nil, fmt.Errorf("Empty SQL data")
 	}
 	fields := strings.Split(str, ":")
 	if len(fields) != 5 {
-		return "", fmt.Errorf("Invalid SQL data - [%s]. (syntax: database:table:field:key:value)", str)
+		return "", nil, fmt.Errorf("Invalid SQL data - [%s]. (syntax: database:table:field:key:value)", str)
 	}
-	db := fields[0]
-	table := fields[1]
-	field := fields[2]
-	key := fields[3]
+	// Quote identifiers to prevent SQL injection and escape existing backticks
+	db := "`" + strings.ReplaceAll(fields[0], "`", "``") + "`"
+	table := "`" + strings.ReplaceAll(fields[1], "`", "``") + "`"
+	field := "`" + strings.ReplaceAll(fields[2], "`", "``") + "`"
+	key := "`" + strings.ReplaceAll(fields[3], "`", "``") + "`"
 	value := fields[4]
-	//check value is int or not
-	if _, err := strconv.Atoi(value); err != nil {
-		return "", fmt.Errorf("Invalid SQL data - [%s], the value must be int", str)
+
+	// Check if value is an integer
+	intValue, err := strconv.Atoi(value)
+	if err != nil {
+		return "", nil, fmt.Errorf("Invalid SQL data - [%s], the value must be int", str)
 	}
 
-	sql := fmt.Sprintf("SELECT %s FROM %s.%s WHERE %s = %s", field, db, table, key, value)
-	return sql, nil
+	// Use parameterized query for value to prevent SQL injection
+	sql := fmt.Sprintf("SELECT %s FROM %s.%s WHERE %s = ?", field, db, table, key)
+	return sql, intValue, nil
 }

