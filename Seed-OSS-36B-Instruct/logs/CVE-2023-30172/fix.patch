--- a/mlflow/server/handlers.py
+++ b/mlflow/server/handlers.py
@@ -535,13 +535,34 @@
 
     if _is_servable_proxied_run_artifact_root(run.info.artifact_uri):
         artifact_repo = _get_artifact_repo_mlflow_artifacts()
+        # Get base path without relative path to validate against
+        proxied_base_path = _get_proxied_run_artifact_destination_path(
+            proxied_artifact_root=run.info.artifact_uri,
+            relative_path=None,
+        )
         artifact_path = _get_proxied_run_artifact_destination_path(
             proxied_artifact_root=run.info.artifact_uri,
             relative_path=request_dict["path"],
         )
+        # Validate path does not escape restricted directory
+        normalized_base = posixpath.normpath(proxied_base_path)
+        normalized_full = posixpath.normpath(artifact_path)
+        if normalized_full != normalized_base and not normalized_full.startswith(normalized_base + posixpath.sep):
+            raise MlflowException(
+                "Invalid path parameter: attempts to access outside restricted directory",
+                error_code=INVALID_PARAMETER_VALUE,
+            )
     else:
         artifact_repo = _get_artifact_repo(run)
         artifact_path = request_dict["path"]
+        # Validate path does not escape restricted directory
+        normalized_base = os.path.normpath(os.path.abspath(artifact_repo.base_path))
+        normalized_full = os.path.normpath(os.path.abspath(os.path.join(artifact_repo.base_path, artifact_path)))
+        if normalized_full != normalized_base and not normalized_full.startswith(normalized_base + os.path.sep):
+            raise MlflowException(
+                "Invalid path parameter: attempts to access outside restricted directory",
+                error_code=INVALID_PARAMETER_VALUE,
+            )
 
     return _send_artifact(artifact_repo, artifact_path)
 
@@ -901,13 +922,37 @@
     run_id = request_message.run_id or request_message.run_uuid
     run = _get_tracking_store().get_run(run_id)
 
+    # Validate path parameter if present
+    if path is not None:
+        if _is_servable_proxied_run_artifact_root(run.info.artifact_uri):
+            # Get base path for proxied artifacts
+            proxied_base_path = _get_proxied_run_artifact_destination_path(
+                proxied_artifact_root=run.info.artifact_uri,
+                relative_path=None,
+            )
+            normalized_base = posixpath.normpath(proxied_base_path)
+            normalized_full = posixpath.normpath(posixpath.join(normalized_base, path))
+            separator = posixpath.sep
+        else:
+            artifact_repo = _get_artifact_repo(run)
+            normalized_base = os.path.normpath(os.path.abspath(artifact_repo.base_path))
+            normalized_full = os.path.normpath(os.path.abspath(os.path.join(artifact_repo.base_path, path)))
+            separator = os.path.sep
+        
+        if normalized_full != normalized_base and not normalized_full.startswith(normalized_base + separator):
+            raise MlflowException(
+                "Invalid path parameter: attempts to access outside restricted directory",
+                error_code=INVALID_PARAMETER_VALUE,
+            )
+
     if _is_servable_proxied_run_artifact_root(run.info.artifact_uri):
         artifact_entities = _list_artifacts_for_proxied_run_artifact_root(
             proxied_artifact_root=run.info.artifact_uri,
             relative_path=path,
         )
     else:
-        artifact_entities = _get_artifact_repo(run).list_artifacts(path)
+        artifact_repo = _get_artifact_repo(run)
+        artifact_entities = artifact_repo.list_artifacts(path)
 
     response_message.files.extend([a.to_proto() for a in artifact_entities])
     response_message.root_uri = run.info.artifact_uri
@@ -1277,13 +1322,34 @@
 
     if _is_servable_proxied_run_artifact_root(artifact_uri):
         artifact_repo = _get_artifact_repo_mlflow_artifacts()
+        # Get base path without relative path to validate against
+        proxied_base_path = _get_proxied_run_artifact_destination_path(
+            proxied_artifact_root=artifact_uri,
+            relative_path=None,
+        )
         artifact_path = _get_proxied_run_artifact_destination_path(
             proxied_artifact_root=artifact_uri,
             relative_path=request_dict["path"],
         )
+        # Validate path does not escape restricted directory
+        normalized_base = posixpath.normpath(proxied_base_path)
+        normalized_full = posixpath.normpath(artifact_path)
+        if normalized_full != normalized_base and not normalized_full.startswith(normalized_base + posixpath.sep):
+            raise MlflowException(
+                "Invalid path parameter: attempts to access outside restricted directory",
+                error_code=INVALID_PARAMETER_VALUE,
+            )
     else:
         artifact_repo = get_artifact_repository(artifact_uri)
         artifact_path = request_dict["path"]
+        # Validate path does not escape restricted directory
+        normalized_base = os.path.normpath(os.path.abspath(artifact_repo.base_path))
+        normalized_full = os.path.normpath(os.path.abspath(os.path.join(artifact_repo.base_path, artifact_path)))
+        if normalized_full != normalized_base and not normalized_full.startswith(normalized_base + os.path.sep):
+            raise MlflowException(
+                "Invalid path parameter: attempts to access outside restricted directory",
+                error_code=INVALID_PARAMETER_VALUE,
+            )
 
     return _send_artifact(artifact_repo, artifact_path)
 

