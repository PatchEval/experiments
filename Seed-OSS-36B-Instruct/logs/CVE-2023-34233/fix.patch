--- a/src/snowflake/connector/auth/webbrowser.py
+++ b/src/snowflake/connector/auth/webbrowser.py
@@ -300,7 +300,58 @@
             ":".join(origin_line.split(":")[1:]).strip(),
         )
 
+    def _get_trusted_domains(self) -> list[str]:
+        """Get list of trusted domains for SSO redirects.
+        
+        Returns:
+            List of trusted domain names (e.g., ['snowflakecomputing.com'])
+        """
+        # Allow configuration via environment variable for enterprise flexibility
+        env_trusted_domains = os.getenv("SF_SSO_TRUSTED_DOMAINS")
+        if env_trusted_domains:
+            return [domain.strip() for domain in env_trusted_domains.split(",")]
+        
+        # Default to Snowflake's domains
+        return [
+            "snowflakecomputing.com",
+            "snowflake.net",
+            "snowflake.dev"
+        ]
+
+    def _is_url_trusted(self, url: str) -> bool:
+        """Validate that URL comes from a trusted domain.
+        
+        Args:
+            url: URL to validate
+            
+        Returns:
+            True if URL is from a trusted domain, False otherwise
+        """
+        try:
+            parsed_url = urlparse(url)
+            if not parsed_url.netloc:
+                return False
+                
+            # Check against trusted domains (case-insensitive)
+            netloc = parsed_url.netloc.lower()
+            trusted_domains = [d.lower() for d in self._get_trusted_domains()]
+            
+            # Allow subdomains (e.g., login.snowflakecomputing.com)
+            for domain in trusted_domains:
+                if netloc.endswith(f".{domain}") or netloc == domain:
+                    return True
+                    
+            return False
+        except Exception as e:
+            logger.debug(f"URL validation failed: {e}")
+            return False
+
     def _process_get_url(self, url: str) -> None:
+        """Process URL and extract token only if from trusted domain."""
+        if not self._is_url_trusted(url):
+            logger.warning(f"Rejected URL from untrusted domain: {url}")
+            return
+            
         parsed = parse_qs(urlparse(url).query)
         if "token" not in parsed or not parsed["token"][0]:
             return

