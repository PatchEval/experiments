--- a/lib/filters/index.js
+++ b/lib/filters/index.js
@@ -77,11 +77,37 @@
         return false;
       }
 
-      // reconstruct the url from the user config
+      // Helper function to check for path traversal attempts
+      const isPathSafe = (basePath, newPath) => {
+        const baseSegments = basePath.split('/').filter(Boolean);
+        const newSegments = newPath.split('/').filter(Boolean);
+        let traversalCount = 0;
+        
+        for (const segment of newSegments) {
+          if (segment === '..') {
+            traversalCount++;
+          } else if (segment !== '.') {
+            if (traversalCount > 0) {
+              traversalCount--;
+            }
+          }
+        }
+        
+        return traversalCount === 0 && newSegments.length + traversalCount <= baseSegments.length;
+      };
+
+      // reconstruct the url from the user config with path validation
       for (let i = 1; i < res.length; i++) {
         const val = fromConfig[keys[i - 1].name];
         if (val) {
+          const originalPath = url;
           url = url.replace(res[i], val);
+          
+          // Validate that path traversal doesn't occur
+          if (!isPathSafe('/', url)) {
+            logger.warn({ originalPath, val, url }, 'Path traversal attempt detected');
+            return false;
+          }
         }
       }
 

