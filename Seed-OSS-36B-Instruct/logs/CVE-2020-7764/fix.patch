--- a/index.js
+++ b/index.js
@@ -27,6 +27,14 @@
 
 const acceptVersionStrategy = require('./lib/accept-version')
 
+const noopVersioning = {
+  storage: () => ({
+    get: () => undefined,
+    set: () => {}
+  }),
+  deriveVersion: () => undefined
+}
+
 function Router (opts) {
   if (!(this instanceof Router)) {
     return new Router(opts)
@@ -51,7 +59,7 @@
   this.ignoreTrailingSlash = opts.ignoreTrailingSlash || false
   this.maxParamLength = opts.maxParamLength || 100
   this.allowUnsafeRegex = opts.allowUnsafeRegex || false
-  this.versioning = opts.versioning || acceptVersionStrategy
+  this.versioning = opts.versioning || noopVersioning
   this.trees = {}
   this.routes = []
 }
@@ -404,16 +412,32 @@
         var paramsObj = {}
         if (handle.paramsLength > 0) {
           var paramNames = handle.params
-
           for (i = 0; i < handle.paramsLength; i++) {
             paramsObj[paramNames[i]] = params[i]
           }
         }
-
         return {
           handler: handle.handler,
           params: paramsObj,
           store: handle.store
+        }
+      }
+      // Fallback to non-versioned handler if version is present but no versioned handler exists
+      if (version !== undefined) {
+        handle = currentNode.handler
+        if (handle !== null && handle !== undefined) {
+          var paramsObj = {}
+          if (handle.paramsLength > 0) {
+            var paramNames = handle.params
+            for (i = 0; i < handle.paramsLength; i++) {
+              paramsObj[paramNames[i]] = params[i]
+            }
+          }
+          return {
+            handler: handle.handler,
+            params: paramsObj,
+            store: handle.store
+          }
         }
       }
     }

