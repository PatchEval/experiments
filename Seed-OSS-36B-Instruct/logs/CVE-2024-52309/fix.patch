--- a/internal/common/common.go
+++ b/internal/common/common.go
@@ -182,8 +182,40 @@
 	version.SetConfig(c.ServerVersion)
 	dataprovider.SetTZ(c.TZ)
 	Config = c
-	Config.Actions.ExecuteOn = util.RemoveDuplicates(Config.Actions.ExecuteOn, true)
-	Config.Actions.ExecuteSync = util.RemoveDuplicates(Config.Actions.ExecuteSync, true)
+
+	// Apply command allowlist restrictions (CVE-2024-XXXX fix)
+	if c.CommandAllowListStatus > 0 {
+		// Filter synchronous commands
+		var allowedSync []string
+		for _, cmd := range c.Actions.ExecuteSync {
+			if slices.Contains(c.CommandAllowList, cmd) {
+				allowedSync = append(allowedSync, cmd)
+			} else {
+				logger.Warn(logSender, "", "Command %q blocked - not in allowlist", cmd)
+			}
+		}
+		Config.Actions.ExecuteSync = util.RemoveDuplicates(allowedSync, true)
+
+		// Filter asynchronous commands
+		var allowedAsync []string
+		for _, cmd := range c.Actions.ExecuteOn {
+			if slices.Contains(c.CommandAllowList, cmd) {
+				allowedAsync = append(allowedAsync, cmd)
+			} else {
+				logger.Warn(logSender, "", "Command %q blocked - not in allowlist", cmd)
+			}
+		}
+		Config.Actions.ExecuteOn = util.RemoveDuplicates(allowedAsync, true)
+
+		logger.Info(logSender, "", "Command allowlist enforced: %d sync/%d async commands allowed",
+			len(Config.Actions.ExecuteSync), len(Config.Actions.ExecuteOn))
+	} else {
+		// Disable system commands by default per security best practices
+		Config.Actions.ExecuteSync = nil
+		Config.Actions.ExecuteOn = nil
+		logger.Info(logSender, "", "System command execution DISABLED by default. Enable via CommandAllowList configuration.")
+	}
+
 	Config.ProxyAllowed = util.RemoveDuplicates(Config.ProxyAllowed, true)
 	Config.idleLoginTimeout = 2 * time.Minute
 	Config.idleTimeoutAsDuration = time.Duration(Config.IdleTimeout) * time.Minute

