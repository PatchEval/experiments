--- a/internal/sftpd/ssh_cmd.go
+++ b/internal/sftpd/ssh_cmd.go
@@ -425,6 +425,10 @@
 		return command, errUnsupportedConfig
 	}
 	if c.command == "rsync" {
+		// Validate rsync arguments to prevent command injection
+		if err := c.validateRsyncArgs(args); err != nil {
+			return command, err
+		}
 		// we cannot avoid that rsync creates symlinks so if the user has the permission
 		// to create symlinks we add the option --safe-links to the received rsync command if
 		// it is not already set. This should prevent to create symlinks that point outside
@@ -454,6 +458,49 @@
 	return command, nil
 }
 
+// validateRsyncArgs checks for potentially dangerous rsync options that could be used for command injection
+func (c *sshCommand) validateRsyncArgs(args []string) error {
+	// List of dangerous rsync options that could be used for command injection or accessing unauthorized files
+	dangerousOptions := map[string]bool{
+		"--include-from": true,
+		"--exclude-from": true,
+		"--filter":       true,
+		"--files-from":   true,
+		"--link-dest":    true,
+		"--copy-dest":    true,
+		"--backup-dir":   true,
+		"--suffix":       true,
+		"--remove-source-files": true,
+		"--delete":          true,
+		"--delete-excluded": true,
+		"--delete-after":    true,
+		"--delete-before":   true,
+		"--delete-delay":    true,
+		"--prune-empty-dirs": true,
+	}
+
+	for _, arg := range args {
+		// Check for long options with parameters
+		if strings.HasPrefix(arg, "--") && strings.Contains(arg, "=") {
+			option := strings.SplitN(arg, "=", 2)[0]
+			if dangerousOptions[option] {
+				return errors.New("dangerous rsync option not allowed: " + option)
+			}
+		} else if strings.HasPrefix(arg, "--") {
+			// Check for long options without parameters
+			if dangerousOptions[arg] {
+				return errors.New("dangerous rsync option not allowed: " + arg)
+			}
+		} else if len(arg) == 1 && strings.HasPrefix(arg, "-") {
+			// Check for short options (single character)
+			// Note: This is a basic check and may need to be expanded based on specific risks
+			return errors.New("short rsync options not allowed for security reasons")
+		}
+	}
+
+	return nil
+}
+
 // for the supported commands, the destination path, if any, is the last argument
 func (c *sshCommand) getDestPath() string {
 	if len(c.args) == 0 {

