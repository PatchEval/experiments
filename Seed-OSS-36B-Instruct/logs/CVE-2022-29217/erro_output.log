[PoC RESULT]: False
[PoC MSG]:
============================== Run PoC ==============================
------------------------------ Standard Output ------------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.23, pytest-6.2.5, py-1.11.0, pluggy-1.6.0 -- /workspace/PoC_env/CVE-2022-29217/bin/python
cachedir: .pytest_cache
rootdir: /workspace/pyjwt, configfile: tox.ini
collecting ... collected 2 items

tests/test_advisory.py::TestAdvisory::test_ghsa_ffqj_6fqr_9h24 FAILED    [ 50%]
tests/test_algorithms.py::TestOKPAlgorithms::test_okp_ed25519_should_reject_non_string_key FAILED [100%]

=================================== FAILURES ===================================
____________________ TestAdvisory.test_ghsa_ffqj_6fqr_9h24 _____________________

self = <tests.test_advisory.TestAdvisory object at 0x7f46029ea430>

    def test_ghsa_ffqj_6fqr_9h24(self):
        # Generate ed25519 private key
        # private_key = ed25519.Ed25519PrivateKey.generate()
    
        # Get private key bytes as they would be stored in a file
        # priv_key_bytes = private_key.private_bytes(
        #     encoding=serialization.Encoding.PEM,
        #     format=serialization.PrivateFormat.PKCS8,
        #     encryption_algorithm=serialization.NoEncryption(),
        # )
    
        # Get public key bytes as they would be stored in a file
        # pub_key_bytes = private_key.public_key().public_bytes(
        #     encoding=serialization.Encoding.OpenSSH,
        #     format=serialization.PublicFormat.OpenSSH,
        # )
    
        # Making a good jwt token that should work by signing it
        # with the private key
        # encoded_good = jwt.encode({"test": 1234}, priv_key_bytes, algorithm="EdDSA")
        encoded_good = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJFZERTQSJ9.eyJ0ZXN0IjoxMjM0fQ.M5y1EEavZkHSlj9i8yi9nXKKyPBSAUhDRTOYZi3zZY11tZItDaR3qwAye8pc74_lZY3Ogt9KPNFbVOSGnUBHDg'
    
        # Using HMAC with the public key to trick the receiver to think that the
        # public key is a HMAC secret
        encoded_bad = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0ZXN0IjoxMjM0fQ.6ulDpqSlbHmQ8bZXhZRLFko9SwcHrghCwh8d-exJEE4'
    
        # Both of the jwt tokens are validated as valid
        jwt.decode(
            encoded_good,
            pub_key_bytes,
            algorithms=jwt.algorithms.get_default_algorithms(),
        )
    
        with pytest.raises(InvalidKeyError):
>           jwt.decode(
                encoded_bad,
                pub_key_bytes,
                algorithms=jwt.algorithms.get_default_algorithms(),
            )
E           Failed: DID NOT RAISE <class 'jwt.exceptions.InvalidKeyError'>

tests/test_advisory.py:55: Failed
_______ TestOKPAlgorithms.test_okp_ed25519_should_reject_non_string_key ________

self = <tests.test_algorithms.TestOKPAlgorithms object at 0x7f46016fd6a0>

    def test_okp_ed25519_should_reject_non_string_key(self):
        algo = OKPAlgorithm()
    
        with pytest.raises(InvalidKeyError):
>           algo.prepare_key(None)

tests/test_algorithms.py:683: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <jwt.algorithms.OKPAlgorithm object at 0x7f46016fdee0>, key = None

    def prepare_key(self, key):
    
        if isinstance(
            key,
            (Ed25519PrivateKey, Ed25519PublicKey, Ed448PrivateKey, Ed448PublicKey),
        ):
            return key
    
        if isinstance(key, (bytes, str)):
            if isinstance(key, str):
                key = key.encode("utf-8")
            str_key = key.decode("utf-8")
    
            if "-----BEGIN PUBLIC" in str_key:
                return load_pem_public_key(key)
            if "-----BEGIN PRIVATE" in str_key:
                return load_pem_private_key(key, password=None)
            if str_key[0:4] == "ssh-":
                return load_ssh_public_key(key)
    
>       raise TypeError("Expecting a PEM-formatted or OpenSSH key.")
E       TypeError: Expecting a PEM-formatted or OpenSSH key.

jwt/algorithms.py:572: TypeError
=========================== short test summary info ============================
FAILED tests/test_advisory.py::TestAdvisory::test_ghsa_ffqj_6fqr_9h24 - Faile...
FAILED tests/test_algorithms.py::TestOKPAlgorithms::test_okp_ed25519_should_reject_non_string_key
============================== 2 failed in 0.18s ===============================

------------------------------ Finish Evaluation ------------------------------


[UnitTest RESULT]: None
[UnitTest MSG]:
 None

[Validation TYPE]: validation_fail