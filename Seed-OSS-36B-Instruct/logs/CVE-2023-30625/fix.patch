--- a/router/failed-events-manager.go
+++ b/router/failed-events-manager.go
@@ -36,6 +36,25 @@
 	dbHandle *sql.DB
 }
 
+// isSafeTaskRunID validates that taskRunID only contains alphanumeric characters and underscores
+func isSafeTaskRunID(s string) bool {
+	if len(s) == 0 {
+		return false
+	}
+	for _, c := range s {
+		switch {
+		case c >= 'a' && c <= 'z',
+			c >= 'A' && c <= 'Z',
+			c >= '0' && c <= '9',
+			c == '_':
+			continue
+		default:
+			return false
+		}
+	}
+	return true
+}
+
 func GetFailedEventsManager() FailedEventsManagerI {
 	if failedEventsManager == nil {
 		fem := new(FailedEventsManagerT)
@@ -56,6 +75,10 @@
 	}
 
 	for taskRunID, failedEvents := range taskRunIDFailedEventsMap {
+		if !isSafeTaskRunID(taskRunID) {
+			pkgLogger.Errorf("Invalid taskRunID %q contains unsafe characters", taskRunID)
+			continue
+		}
 		table := `"` + strings.ReplaceAll(fmt.Sprintf(`%s_%s`, failedKeysTablePrefix, taskRunID), `"`, `""`) + `"`
 		sqlStatement := fmt.Sprintf(`CREATE TABLE IF NOT EXISTS %s (
 		destination_id TEXT NOT NULL,
@@ -93,6 +116,11 @@
 		return
 	}
 
+	if !isSafeTaskRunID(taskRunID) {
+		pkgLogger.Errorf("Invalid taskRunID %q contains unsafe characters", taskRunID)
+		return
+	}
+
 	// Drop table
 	table := fmt.Sprintf(`%s_%s`, failedKeysTablePrefix, taskRunID)
 	sqlStatement := fmt.Sprintf(`DROP TABLE IF EXISTS %s`, table)
@@ -104,6 +132,11 @@
 
 func (fem *FailedEventsManagerT) FetchFailedRecordIDs(taskRunID string) []*FailedEventRowT {
 	if !failedKeysEnabled {
+		return []*FailedEventRowT{}
+	}
+
+	if !isSafeTaskRunID(taskRunID) {
+		pkgLogger.Errorf("Invalid taskRunID %q contains unsafe characters", taskRunID)
 		return []*FailedEventRowT{}
 	}
 

