--- a/rdiffweb/core/model/_sshkey.py
+++ b/rdiffweb/core/model/_sshkey.py
@@ -23,7 +23,11 @@
 
 class SshKey(Base):
     __tablename__ = 'sshkeys'
-    __table_args__ = {'sqlite_autoincrement': True}
+    __table_args__ = (
+        UniqueConstraint('UserID', 'Key', name='_user_key_uc'),
+        {'sqlite_autoincrement': True}
+    )
+    id = Column('ID', Integer, primary_key=True)
     fingerprint = Column('Fingerprint', Text)
-    key = Column('Key', Text, unique=True, primary_key=True)
+    key = Column('Key', Text, nullable=False)
     userid = Column('UserID', Integer, nullable=False)

--- a/rdiffweb/core/model/_user.py
+++ b/rdiffweb/core/model/_user.py
@@ -179,7 +179,7 @@
                 SshKey(userid=self.userid, fingerprint=key.fingerprint, key=key.getvalue()).add().flush()
             except IntegrityError:
                 raise DuplicateSSHKeyError(
-                    _("Duplicate key. This key already exists or is associated to another user.")
+                    _("Duplicate key. This key already exists for your account.")
                 )
         cherrypy.engine.publish('user_attr_changed', self, {'authorizedkeys': True})
         cherrypy.engine.publish('authorizedkey_added', self, fingerprint=key.fingerprint, comment=comment)

--- a/rdiffweb/core/model/__init__.py
+++ b/rdiffweb/core/model/__init__.py
@@ -137,3 +137,43 @@
             logger.error(msg)
             print(msg, file=sys.stderr)
             raise SystemExit(12)
+
+    # Update SshKey table schema
+    # Add id column if missing
+    if not _column_exists(connection, SshKey.__table__.c.id):
+        _column_add(connection, SshKey.__table__.c.id)
+    
+    # Add unique constraint on UserID and Key if missing
+    if not _index_exists(connection, '_user_key_uc'):
+        if 'SQLite' in connection.engine.dialect.__class__.__name__:
+            connection.engine.execute('CREATE UNIQUE INDEX _user_key_uc ON sshkeys (UserID, Key)')
+        else:
+            connection.engine.execute('ALTER TABLE sshkeys ADD CONSTRAINT _user_key_uc UNIQUE (UserID, Key)')
+    
+    # Handle SQLite schema migration to remove primary key from key column
+    if 'SQLite' in connection.engine.dialect.__class__.__name__:
+        # Check if we need to migrate old schema (key as primary key)
+        try:
+            result = connection.engine.execute("PRAGMA table_info(sshkeys)").fetchall()
+            key_is_primary = any(row['pk'] == 1 and row['name'] == 'Key' for row in result)
+            if key_is_primary:
+                # Rename old table
+                connection.engine.execute('ALTER TABLE sshkeys RENAME TO sshkeys_old')
+                # Create new table with correct schema
+                SshKey.__table__.create(connection)
+                # Copy data from old to new table
+                connection.engine.execute('''
+                    INSERT INTO sshkeys (id, fingerprint, key, userid) 
+                    SELECT id, fingerprint, Key, UserID FROM sshkeys_old
+                ''')
+                # Drop old table
+                connection.engine.execute('DROP TABLE sshkeys_old')
+        except Exception as e:
+            logger.error('SshKey schema migration failed: %s', e)
+            # Restore original table if migration fails
+            try:
+                connection.engine.execute('DROP TABLE sshkeys')
+                connection.engine.execute('ALTER TABLE sshkeys_old RENAME TO sshkeys')
+            except:
+                pass
+            raise

