--- a/pandasai/__init__.py
+++ b/pandasai/__init__.py
@@ -596,10 +596,15 @@
         Returns (str): Returns a Clean Code String
 
         """
-
         tree = ast.parse(code)
-
         new_body = []
+        
+        # Define dangerous functions to block
+        dangerous_builtins = {"exec", "eval", "compile", "__import__"}
+        dangerous_module_calls = {
+            "os": {"system", "popen", "fork", "execv"},
+            "subprocess": {"run", "call", "check_output", "Popen"},
+        }
 
         # clear recent optional dependencies
         self._additional_dependencies = []
@@ -610,6 +615,29 @@
                 continue
             if self._is_df_overwrite(node):
                 continue
+
+            # Check for dangerous function calls in this node
+            has_dangerous_call = False
+            for child in ast.walk(node):
+                if isinstance(child, ast.Call):
+                    # Check for direct built-in function calls (e.g. exec(...))
+                    if isinstance(child.func, ast.Name):
+                        if child.func.id in dangerous_builtins:
+                            has_dangerous_call = True
+                            break
+                    # Check for module attribute calls (e.g. os.system(...))
+                    elif isinstance(child.func, ast.Attribute):
+                        if (
+                            isinstance(child.func.value, ast.Name)
+                            and child.func.value.id in dangerous_module_calls
+                            and child.func.attr in dangerous_module_calls[child.func.value.id]
+                        ):
+                            has_dangerous_call = True
+                            break
+
+            if has_dangerous_call:
+                raise BadImportError("Dangerous function call detected")
+
             new_body.append(node)
 
         new_tree = ast.Module(body=new_body)

