--- a/mlflow/utils/uri.py
+++ b/mlflow/utils/uri.py
@@ -425,22 +425,41 @@
     measure to prevent path traversal attacks.
     A valid path should:
         not contain separators other than '/'
-        not contain .. to navigate to parent dir in path
+        not contain .. to navigate to parent dir in path (including URL-encoded variants)
         not be an absolute path
     """
     from mlflow.utils.file_utils import local_file_uri_to_path
 
     exc = MlflowException(f"Invalid path: {path}", error_code=INVALID_PARAMETER_VALUE)
+    
+    # Check for URL fragments and problematic characters
     if any((s in path) for s in ("#", "%23")):
         raise exc
 
+    # Convert file URIs to local paths first
     if is_file_uri(path):
         path = local_file_uri_to_path(path)
+
+    # Check for alternate separators (e.g. \ on Windows)
+    if any((s in path) for s in _OS_ALT_SEPS):
+        raise exc
+
+    # Normalize path and check for traversal sequences
+    normalized_path = posixpath.normpath(path)
+    
+    # Check for path traversal sequences (including URL-encoded variants)
     if (
-        any((s in path) for s in _OS_ALT_SEPS)
-        or ".." in path.split("/")
+        ".." in normalized_path.split(posixpath.sep)
+        or "%2e%2e" in path.lower()
+        or "%2e%2e/" in path.lower()
+        or "/%2e%2e" in path.lower()
+    ):
+        raise exc
+
+    # Check for absolute paths
+    if (
+        posixpath.isabs(normalized_path)
         or pathlib.PureWindowsPath(path).is_absolute()
-        or pathlib.PurePosixPath(path).is_absolute()
         or (is_windows() and len(path) >= 2 and path[1] == ":")
     ):
         raise exc

