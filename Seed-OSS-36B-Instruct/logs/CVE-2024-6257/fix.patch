--- a/get_git.go
+++ b/get_git.go
@@ -196,6 +196,12 @@
 	if ref == "" {
 		ref = findRemoteDefaultBranch(ctx, u)
 	}
+	
+	// Validate ref format before using it in git commands
+	if originalRef != "" && !isValidGitRef(originalRef) {
+		return fmt.Errorf("invalid git reference format: %q", originalRef)
+	}
+	
 	if depth > 0 {
 		args = append(args, "--depth", strconv.Itoa(depth))
 		args = append(args, "--branch", ref)
@@ -226,6 +232,28 @@
 		return g.checkout(ctx, dst, originalRef)
 	}
 	return nil
+}
+
+// isValidGitRef checks if a reference name follows Git's naming rules
+// Ref: https://git-scm.com/docs/git-check-ref-format
+func isValidGitRef(ref string) bool {
+	if ref == "" {
+		return false
+	}
+	// Git doesn't allow these characters in ref names
+	forbidden := []string{"@", "{", "}", "\\", "^", ":", "?", "*", "[", "]"}
+	for _, f := range forbidden {
+		if strings.Contains(ref, f) {
+			return false
+		}
+	}
+	// Ref names must not start with these
+	for _, prefix := range []string{"refs/", "HEAD", "ORIG_HEAD", "MERGE_HEAD"} {
+		if strings.HasPrefix(ref, prefix) {
+			return false
+		}
+	}
+	return true
 }
 
 func (g *GitGetter) update(ctx context.Context, dst, sshKeyFile, ref string, depth int) error {
@@ -288,6 +316,11 @@
 // findRemoteDefaultBranch checks the remote repo's HEAD symref to return the remote repo's
 // default branch. "master" is returned if no HEAD symref exists.
 func findRemoteDefaultBranch(ctx context.Context, u *url.URL) string {
+	// Validate URL before using it in git command
+	if !isValidGitURL(u.String()) {
+		return "master"
+	}
+	
 	var stdoutbuf bytes.Buffer
 	cmd := exec.CommandContext(ctx, "git", "ls-remote", "--symref", u.String(), "HEAD")
 	cmd.Stdout = &stdoutbuf
@@ -296,7 +329,42 @@
 	if err != nil || matches == nil {
 		return "master"
 	}
-	return matches[len(matches)-1]
+	
+	// Validate and sanitize the branch name before returning
+	branch := matches[len(matches)-1]
+	if !isValidGitRef(branch) {
+		return "master"
+	}
+	return branch
+}
+
+// isValidGitURL checks if a string is a valid Git URL format
+func isValidGitURL(rawurl string) bool {
+	u, err := url.Parse(rawurl)
+	if err != nil {
+		return false
+	}
+	
+	// Check for common Git URL schemes
+	switch u.Scheme {
+	case "git", "http", "https", "ssh", "git+ssh", "git+http", "git+https":
+		return u.Host != "" && u.Path != ""
+	case "":
+		// Handle SCP-style SSH URLs (e.g., user@host:path)
+		parts := strings.SplitN(rawurl, ":", 2)
+		if len(parts) != 2 {
+			return false
+		}
+		// Check that host part has at least one dot or is an IP address
+		host := parts[0]
+		if !strings.Contains(host, ".") && !strings.Contains(host, ":") {
+			return false
+		}
+		// Path part should not be empty
+		return parts[1] != ""
+	default:
+		return false
+	}
 }
 
 // setupGitEnv sets up the environment for the given command. This is used to

