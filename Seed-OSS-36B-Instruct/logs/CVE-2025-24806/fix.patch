--- a/internal/handlers/handler_firstfactor.go
+++ b/internal/handlers/handler_firstfactor.go
@@ -31,7 +31,18 @@
 			return
 		}
 
-		if bannedUntil, err := ctx.Providers.Regulator.Regulate(ctx, bodyJSON.Username); err != nil {
+		// Get user details first to ensure we use the effective username for regulation
+		userDetails, err := ctx.Providers.UserProvider.GetDetails(bodyJSON.Username)
+		if err != nil {
+			ctx.Logger.WithError(err).Errorf(logFmtErrObtainProfileDetails, regulation.AuthType1FA, bodyJSON.Username)
+
+			respondUnauthorized(ctx, messageAuthenticationFailed)
+
+			return
+		}
+
+		effectiveUsername := userDetails.Username
+		if bannedUntil, err := ctx.Providers.Regulator.Regulate(ctx, effectiveUsername); err != nil {
 			if errors.Is(err, regulation.ErrUserIsBanned) {
 				_ = markAuthenticationAttempt(ctx, false, &bannedUntil, bodyJSON.Username, regulation.AuthType1FA, nil)
 
@@ -49,7 +60,7 @@
 
 		userPasswordOk, err := ctx.Providers.UserProvider.CheckUserPassword(bodyJSON.Username, bodyJSON.Password)
 		if err != nil {
-			_ = markAuthenticationAttempt(ctx, false, nil, bodyJSON.Username, regulation.AuthType1FA, err)
+			_ = markAuthenticationAttempt(ctx, false, nil, effectiveUsername, regulation.AuthType1FA, err)
 
 			respondUnauthorized(ctx, messageAuthenticationFailed)
 
@@ -57,14 +68,14 @@
 		}
 
 		if !userPasswordOk {
-			_ = markAuthenticationAttempt(ctx, false, nil, bodyJSON.Username, regulation.AuthType1FA, nil)
+			_ = markAuthenticationAttempt(ctx, false, nil, effectiveUsername, regulation.AuthType1FA, nil)
 
 			respondUnauthorized(ctx, messageAuthenticationFailed)
 
 			return
 		}
 
-		if err = markAuthenticationAttempt(ctx, true, nil, bodyJSON.Username, regulation.AuthType1FA, nil); err != nil {
+		if err = markAuthenticationAttempt(ctx, true, nil, effectiveUsername, regulation.AuthType1FA, nil); err != nil {
 			respondUnauthorized(ctx, messageAuthenticationFailed)
 
 			return
@@ -122,8 +133,8 @@
 			}
 		}
 
-		// Get the details of the given user from the user provider.
-		userDetails, err := ctx.Providers.UserProvider.GetDetails(bodyJSON.Username)
+		// Reuse userDetails we already retrieved earlier
+		err = nil
 		if err != nil {
 			ctx.Logger.WithError(err).Errorf(logFmtErrObtainProfileDetails, regulation.AuthType1FA, bodyJSON.Username)
 

