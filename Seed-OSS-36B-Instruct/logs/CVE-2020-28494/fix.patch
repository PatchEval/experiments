--- a/image.js
+++ b/image.js
@@ -287,8 +287,13 @@
 	!self.builder.length && self.minify();
 	!type && (type = self.outputType);
 
+	// Sanitize type to prevent command injection (only allow letters)
+	if (type && !/^[a-zA-Z]+$/.test(type)) {
+		throw new Error('Invalid image type: ' + type);
+	}
+
 	F.stats.performance.open++;
-	var cmd = spawn(CMD_CONVERT[self.cmdarg], self.arg(self.filename ? wrap(self.filename) : '-', (type ? type + ':' : '') + '-'), SPAWN_OPT);
+	var cmd = spawn(CMD_CONVERT[self.cmdarg], self.arg(self.filename ? wrap(self.filename) : '-', (type ? type + ':' : '') + '-'), { shell: false });
 	cmd.stderr.on('data', stream.emit.bind(stream, 'error'));
 	cmd.stdout.on('data', stream.emit.bind(stream, 'data'));
 	cmd.stdout.on('end', stream.emit.bind(stream, 'end'));
@@ -325,8 +330,13 @@
 	if (!type)
 		type = self.outputType;
 
+	// Sanitize type to prevent command injection (only allow letters)
+	if (type && !/^[a-zA-Z]+$/.test(type)) {
+		throw new Error('Invalid image type: ' + type);
+	}
+
 	F.stats.performance.open++;
-	var cmd = spawn(CMD_CONVERT[self.cmdarg], self.arg(self.filename ? wrap(self.filename) : '-', (type ? type + ':' : '') + '-'), SPAWN_OPT);
+	var cmd = spawn(CMD_CONVERT[self.cmdarg], self.arg(self.filename ? wrap(self.filename) : '-', (type ? type + ':' : '') + '-'), { shell: false });
 	if (self.currentStream) {
 		if (self.currentStream instanceof Buffer)
 			cmd.stdin.end(self.currentStream);

