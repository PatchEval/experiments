--- a/modules/utils.py
+++ b/modules/utils.py
@@ -421,6 +421,8 @@
         filename = filename[:-3]
     if not filename.endswith(".json") and not filename.endswith(".md"):
         filename += ".json"
+    # Sanitize filename to prevent path traversal attacks
+    filename = os.path.basename(filename)
     if filename == ".json":
         raise Exception("文件名不能为空")
 
@@ -443,14 +445,19 @@
         "stream": model.stream,
         "metadata": model.metadata,
     }
-    if not filename == os.path.basename(filename):
-        history_file_path = filename
-    else:
-        history_file_path = os.path.join(HISTORY_DIR, user_name, filename)
-
-    # check if history file path matches user_name
-    # if user access control is not enabled, user_name is empty, don't check
+    # Construct path safely within user's history directory
+    base_dir = os.path.join(HISTORY_DIR, user_name)
+    history_file_path = os.path.join(base_dir, filename)
+
+    # Verify path is within allowed directory boundaries
+    real_base = os.path.realpath(base_dir)
+    real_history = os.path.realpath(history_file_path)
+    if not os.path.commonpath([real_base, real_history]) == real_base:
+        raise ValueError("Invalid filename - path traversal detected")
+
+    # check if history file path matches user_name (now redundant but maintained for safety)
     assert os.path.basename(os.path.dirname(history_file_path)) == model.user_name or model.user_name == ""
+    
     with open(history_file_path, "w", encoding="utf-8") as f:
         json.dump(json_s, f, ensure_ascii=False, indent=4)
 

