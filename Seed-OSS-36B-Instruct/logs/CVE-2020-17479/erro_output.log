[PoC RESULT]: False
[PoC MSG]:
============================== Run PoC ==============================
------------------------------ Standard Output ------------------------------
TAP version 14
# Subtest: Arrays
    ok 1 - Valid Case
error - the value of: {"items"."list".[1]."cost": -50} not matched with: operator "is": "gt(0)"
    ok 2 - Invalid Case
    1..2
ok 1 - Arrays # time=4.566ms

error - the value of: {"items": [object Object]} not matched with: 
# Subtest: Arrays Corrupted case
    ok 1 - Corrupted Array 1
error - the value of: {"items": [object Array]} not matched with: 
    ok 2 - Corrupted Array 2
error - the value of: {"items": [object Object]} not matched with: 
    ok 3 - Corrupted Array 3
error - the value of: {"items": Normal One} not matched with: undefined
error - the value of: {"items": Normal One,1,[object Object]} not matched with: 
    not ok 4 - Corrupted Array Normmal Case
      ---
      at:
        fileName: test/arrays.js
        lineNumber: 90
        columnNumber: 7
        typeName: Test
      stack: |
        Test.<anonymous> (test/arrays.js:90:7)
        Object.<anonymous> (test/arrays.js:86:5)
        importOrRequire (/root/.npm/_npx/56d1233753005df3/node_modules/tape/bin/import-or-require.js:14:2)
        /root/.npm/_npx/56d1233753005df3/node_modules/tape/bin/tape:113:9
        Array.reduce
        importFiles (/root/.npm/_npx/56d1233753005df3/node_modules/tape/bin/tape:110:24)
      source: >2
            t.ok(!validate(corruptedArray2, corruptedCheckPattern, { debug: true }), 'Corrupted Array 2');
            t.ok(!validate(corruptedArray3, corruptedCheckPattern, { debug: true }), 'Corrupted Array 3');
            t.ok(validate(normalArray1, corruptedCheckPattern, { debug: true }), 'Corrupted Array Normmal Case');
        ------^
            t.end();
        });
      ...
    
    1..4
not ok 2 - Arrays Corrupted case # time=15.155ms
  ---
  at:
    fileName: test/arrays.js
    lineNumber: 86
    columnNumber: 5
    typeName: Object
  source: >
  
    // Valid Case
  
    tap.test('Arrays Corrupted case', function (t) {
  
    ----^
        t.ok(!validate(corruptedArray1, corruptedCheckPattern, { debug: true }), 'Corrupted Array 1');
        t.ok(!validate(corruptedArray2, corruptedCheckPattern, { debug: true }), 'Corrupted Array 2');
  ...

TAP version 13
1..2
# { total: 6, pass: 5, fail: 1 }
# time=37.395ms

------------------------------ Finish Evaluation ------------------------------


[UnitTest RESULT]: None
[UnitTest MSG]:
 None

[Validation TYPE]: validation_fail