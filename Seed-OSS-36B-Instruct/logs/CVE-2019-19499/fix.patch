--- a/pkg/tsdb/mysql/mysql.go
+++ b/pkg/tsdb/mysql/mysql.go
@@ -31,12 +31,24 @@
 	if strings.HasPrefix(datasource.Url, "/") {
 		protocol = "unix"
 	}
+	
+	// Sanitize database name to prevent SQL injection
+	sanitizedDB := strings.Map(func(r rune) rune {
+		if r >= 'a' && r <= 'z' || r >= 'A' && r <= 'Z' || r >= '0' && r <= '9' || r == '_' || r == '-' {
+			return r
+		}
+		return -1
+	}, datasource.Database)
+	
+	// Escape URL to prevent SQL injection and connection string parsing issues
+	escapedUrl := url.QueryEscape(datasource.Url)
+	
 	cnnstr := fmt.Sprintf("%s:%s@%s(%s)/%s?collation=utf8mb4_unicode_ci&parseTime=true&loc=UTC&allowNativePasswords=true",
 		datasource.User,
 		datasource.DecryptedPassword(),
 		protocol,
-		datasource.Url,
-		datasource.Database,
+		escapedUrl,
+		sanitizedDB,
 	)
 
 	tlsConfig, err := datasource.GetTLSConfig()

