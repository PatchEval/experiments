--- a/src/webfinger/lookup.ts
+++ b/src/webfinger/lookup.ts
@@ -26,6 +26,46 @@
     protocol = resource.protocol;
     server = resource.host;
   }
+
+  // Validate server hostname does not resolve to restricted IPs
+  async function isHostnameRestricted(hostname: string): Promise<boolean> {
+    try {
+      const [ipv4s, ipv6s] = await Promise.all([
+        Deno.resolveDns(hostname, "A").catch(() => []),
+        Deno.resolveDns(hostname, "AAAA").catch(() => []),
+      ]);
+      const allIps = [...ipv4s, ...ipv6s];
+      for (const ip of allIps) {
+        // Check loopback addresses
+        if (ip.startsWith("127.") || ip === "::1") return true;
+        // Check private IPv4 ranges
+        const ipv4Parts = ip.split(".").map(Number);
+        if (ipv4Parts.length === 4) {
+          if (
+            ipv4Parts[0] === 10 || // 10.0.0.0/8
+            (ipv4Parts[0] === 172 && ipv4Parts[1] >= 16 && ipv4Parts[1] <= 31) || // 172.16.0.0/12
+            (ipv4Parts[0] === 192 && ipv4Parts[1] === 168) // 192.168.0.0/16
+          ) return true;
+        }
+        // Check private IPv6 ranges (fc00::/7)
+        if (ip.startsWith("fc") || ip.startsWith("fd")) return true;
+      }
+      return false;
+    } catch {
+      return false; // Resolution failure means we can't confirm restriction
+    }
+  }
+
+  const serverUrl = new URL(`https://${server}`);
+  const hostname = serverUrl.hostname;
+  if (await isHostnameRestricted(hostname)) {
+    logger.error(
+      "WebFinger lookup blocked access to restricted hostname: {hostname}",
+      { hostname }
+    );
+    return null;
+  }
+
   let url = new URL(`${protocol}//${server}/.well-known/webfinger`);
   url.searchParams.set("resource", resource.href);
   let redirected = 0;
@@ -76,6 +116,15 @@
         );
         return null;
       }
+      // Validate redirected hostname is not restricted
+      const redirectedHostname = new URL(redirectedUrl.href).hostname;
+      if (await isHostnameRestricted(redirectedHostname)) {
+        logger.error(
+          "WebFinger lookup blocked redirect to restricted hostname: {hostname}",
+          { hostname: redirectedHostname }
+        );
+        return null;
+      }
       url = redirectedUrl;
       continue;
     }

