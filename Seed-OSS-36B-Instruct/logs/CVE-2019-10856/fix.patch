--- a/notebook/auth/login.py
+++ b/notebook/auth/login.py
@@ -44,18 +44,24 @@
         # instead of %5C, causing `\\` to behave as `//`
         url = url.replace("\\", "%5C")
         parsed = urlparse(url)
-        if parsed.netloc or not (parsed.path + '/').startswith(self.base_url):
-            # require that next_url be absolute path within our path
+        # Check if URL needs validation (has netloc or doesn't start with base_url)
+        needs_validation = parsed.netloc or not (parsed.path + '/').startswith(self.base_url)
+        
+        if needs_validation:
             allow = False
-            # OR pass our cross-origin check
+            # Always run CORS check if we have a netloc (even empty string)
             if parsed.netloc:
-                # if full URL, run our cross-origin check:
-                origin = '%s://%s' % (parsed.scheme, parsed.netloc)
-                origin = origin.lower()
-                if self.allow_origin:
-                    allow = self.allow_origin == origin
-                elif self.allow_origin_pat:
-                    allow = bool(self.allow_origin_pat.match(origin))
+                # Handle empty netloc case first
+                if not parsed.netloc:
+                    allow = False
+                else:
+                    # For non-empty netloc, run standard cross-origin check
+                    origin = '%s://%s' % (parsed.scheme, parsed.netloc)
+                    origin = origin.lower()
+                    if self.allow_origin:
+                        allow = self.allow_origin == origin
+                    elif self.allow_origin_pat:
+                        allow = bool(self.allow_origin_pat.match(origin))
             if not allow:
                 # not allowed, use default
                 self.log.warning("Not allowing login redirect to %r" % url)

