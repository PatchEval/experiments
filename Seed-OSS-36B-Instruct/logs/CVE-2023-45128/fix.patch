--- a/middleware/csrf/csrf.go
+++ b/middleware/csrf/csrf.go
@@ -3,6 +3,7 @@
 import (
 	"errors"
 	"reflect"
+	"strings"
 	"time"
 
 	"github.com/gofiber/fiber/v2"
@@ -72,11 +73,9 @@
 		default:
 			// Assume that anything not defined as 'safe' by RFC7231 needs protection
 
-			// Enforce an origin check for HTTPS connections.
-			if c.Protocol() == "https" {
-				if err := refererMatchesHost(c); err != nil {
-					return cfg.ErrorHandler(c, err)
-				}
+			// Enforce origin check for all connections
+			if err := refererMatchesHost(c); err != nil {
+				return cfg.ErrorHandler(c, err)
 			}
 
 			// Extract token from client request i.e. header, query, param, form or cookie
@@ -157,7 +156,7 @@
 
 func deleteTokenFromStorage(c *fiber.Ctx, token string, cfg Config, sessionManager *sessionManager, storageManager *storageManager) {
 	if cfg.Session != nil {
-		sessionManager.delRaw(c)
+		sessionManager.delRaw(c, token)
 	} else {
 		storageManager.delRaw(token)
 	}
@@ -223,7 +222,8 @@
 	if referer == "" {
 		return ErrNoReferer
 	}
-	if referer != c.Protocol()+"://"+c.Hostname() {
+	origin := c.Protocol() + "://" + c.Host()
+	if !strings.HasPrefix(referer, origin) {
 		return ErrBadReferer
 	}
 	return nil

