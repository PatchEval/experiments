[PoC RESULT]: True
[PoC MSG]:
============================== Run PoC ==============================
------------------------------ Standard Output ------------------------------


  follow-redirects
    when the client passes an header named Authorization
      ✓ drops the header when redirected from a different host via header
    when the client passes an header named Cookie
      ✓ drops the header when redirected from a different host via header


  2 passing (40ms)


------------------------------ Finish Evaluation ------------------------------


[UnitTest RESULT]: True
[UnitTest MSG]:
 ============================== Run Unit Test ==============================
------------------------------ Standard Output ------------------------------


  follow-redirects
    ✓ http.get with string and callback - redirect (38ms)
    ✓ http.get with URL object and callback - redirect
    ✓ http.get with options object and callback - redirect
    ✓ http.get with string and callback - no redirect
    ✓ http.get with options object and callback - no redirect
    ✓ http.get with host option and callback - redirect
    ✓ http.get with response event
    ✓ should return with the original status code if the response does not contain a location header
    ✓ should emit connection errors on the returned stream
    ✓ should emit socket events on the returned stream
    ✓ should emit connect events on the returned stream
    ✓ emits an error whem url.resolve fails
    ✓ should follow redirects over https (39ms)
    ✓ should destroy responses
    ✓ should honor query params in redirects
    ✓ should allow aborting
    ✓ should provide connection
    ✓ should provide flushHeaders
    ✓ should provide getHeader
    ✓ should provide removeHeader
    ✓ should provide setHeader
    ✓ should provide setNoDelay
    ✓ should provide setSocketKeepAlive
    ✓ should provide setTimeout
    ✓ should provide socket
    ✓ should wait for an explicit call to end
    ✓ errors on write after end
    ✓ should support writing into request stream without redirects
    ✓ should support writing into request stream with redirects
    ✓ should support piping into request stream without redirects
    ✓ should support piping into request stream with redirects
    ✓ should support piping into request stream with explicit Content-Length without redirects
    ✓ should support piping into request stream with explicit Content-Length with redirects
    setTimeout
      ✓ clears timeouts after a successful response
      ✓ clears timeouts after an error response
      ✓ handles errors occuring before a socket is established
      ✓ sets a timeout when the socket already exists
      ✓ should timeout on the final request
      ✓ should include redirect delays in the timeout
      ✓ overrides existing timeouts
    should obey a `maxRedirects` property
      ✓ which defaults to 21 (38ms)
      ✓ which can be set globally
      ✓ set as an option on an individual request
    the trackRedirects option
      when not set
        ✓ should not track redirects
      when set to true
        ✓ should track redirects
    should switch to safe methods when appropriate
      when redirecting with status code 300
        ✓ should reuse GET
        ✓ should reuse HEAD
        ✓ should reuse POST
        ✓ should reuse PUT
        ✓ should reuse DELETE
      when redirecting with status code 301
        ✓ should reuse GET
        ✓ should reuse HEAD
        ✓ should switch from POST to GET
        ✓ should reuse PUT
        ✓ should reuse DELETE
      when redirecting with status code 302
        ✓ should reuse GET
        ✓ should reuse HEAD
        ✓ should switch from POST to GET
        ✓ should reuse PUT
        ✓ should reuse DELETE
      when redirecting with status code 303
        ✓ should reuse GET
        ✓ should reuse HEAD
        ✓ should switch from POST to GET
        ✓ should switch from PUT to GET
        ✓ should switch from DELETE to GET
      when redirecting with status code 307
        ✓ should reuse GET
        ✓ should reuse HEAD
        ✓ should reuse POST
        ✓ should reuse PUT
        ✓ should reuse DELETE
    should handle cross protocol redirects 
      ✓ (https -> http -> https)
      ✓ (http -> https -> http)
    should error on an unsupported protocol redirect
      ✓ (http -> about)
    should obey a `maxBodyLength` property
      ✓ which defaults to 10MB
      ✓ set globally, on write
      ✓ set per request, on write
      ✓ set globally, on end
      ✓ set per request, on end
    writing invalid data
      ✓ throws an error
    when switching from POST to GET
      ✓ should drop the entity and associated headers
    when redirecting to a different host while the host header is set
      ✓ uses the new host header if redirect host is different
      ✓ uses the location host if redirect host is the same
      ✓ uses the existing host header if redirect host is relative
    when the client passes an Authorization header
      ✓ ignores it when null
      ✓ keeps the header when redirected to the same host
      ✓ keeps the header when redirected to the same host via header
      ✓ keeps the header when redirected to the same host via header
      ✓ keeps the header when redirected to a subdomain
      ✓ drops the header when redirected to a different host (same hostname and different port)
      ✓ drops the header when redirected to a different host
      ✓ drops the header when redirected from a different host via header
    when the followRedirects option is set to false
      ✓ does not redirect
    should choose the right agent per protocol
      ✓ (https -> http -> https)
    should not hang on empty writes
      ✓ when data is the empty string without encoding
      ✓ when data is the empty string with encoding
      ✓ when data is Buffer.from('')
    end accepts as arguments
      ✓ (none)
      ✓ the empty string
      ✓ a non-empty string
      ✓ a non-empty string and an encoding
      ✓ a non-empty string, an encoding, and a callback
      ✓ a non-empty string and a callback
      ✓ a callback
    change request options before redirects
      ✓ only call beforeRedirect on redirects, not the inital http call
      ✓ ignore beforeRedirect if not a function
      ✓ append new header with every redirect
      ✓ abort request chain after throwing an error
      ✓ access response header in beforeRedirect


  108 passing (435ms)


------------------------------ Finish Evaluation ------------------------------


[Validation TYPE]: Repair Success