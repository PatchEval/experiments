--- a/ipycache.py
+++ b/ipycache.py
@@ -120,25 +120,27 @@
             cache={}
             #raise IOError(str(e))
         
+        # Create a clean result dict with only requested variables
+        result = {}
+        
         # Check that all requested variables could be loaded successfully
-        # from the cache.
         missing_vars = sorted(set(vars) - set(cache.keys()))
         if missing_vars:
             raise ValueError(("The following variables could not be loaded "
                 "from the cache: {0:s}").format(
                 ', '.join(["'{0:s}'".format(var) for var in missing_vars])))
-        additional_vars = sorted(set(cache.keys()) - set(vars))
-        for hidden_variable in '_captured_io', '_cell_md5':
-            try:
-                additional_vars.remove(hidden_variable)
-            except ValueError:
-                pass
-        if additional_vars:
-            raise ValueError("The following variables were present in the cache, "
-                    "but removed from the storage request: {0:s}".format(
-                ', '.join(["'{0:s}'".format(var) for var in additional_vars])))
-        
-        return cache
+        
+        # Only keep explicitly requested variables to prevent code injection
+        # through unexpected/untrusted variables in the cache
+        for var in vars:
+            result[var] = cache[var]
+            
+        # Preserve internal variables but keep them separate from user variables
+        for hidden_var in ['_captured_io', '_cell_md5']:
+            if hidden_var in cache:
+                result[hidden_var] = cache[hidden_var]
+        
+        return result
 
 def save_vars(path, vars_d):
     """Save variables into a pickle file.

