[PoC RESULT]: False
[PoC MSG]:
============================== Run PoC ==============================
------------------------------ Standard Output ------------------------------
============================= test session starts ==============================
platform linux -- Python 3.8.20, pytest-7.0.1, pluggy-1.5.0 -- /workspace/PoC_env/CVE-2019-7539/bin/python
cachedir: .pytest_cache
rootdir: /workspace/ipycache
plugins: asyncio-0.23.8, anyio-4.5.2
asyncio: mode=strict
collecting ... collected 11 items / 10 deselected / 1 selected

test_ipycache.py::test_load_exploitPickle FAILED                         [100%]

=================================== FAILURES ===================================
___________________________ test_load_exploitPickle ____________________________

    def test_load_exploitPickle():
        class vulnLoad():
            def __init__(self):
                self.a = 1
    
            def __reduce__(self):
                return (os.system, ('uname -a',))
    
        payload = vulnLoad()
        path = "malicious.pkl"
        with open("malicious.pkl", "wb") as f:
            pickle.dump(payload, f)
>       assert_raises(pickle.UnpicklingError, load_vars, path, ['a'])

test_ipycache.py:223: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/miniconda3/envs/py_38/lib/python3.8/unittest/case.py:816: in assertRaises
    return context.handle('assertRaises', args, kwargs)
/root/miniconda3/envs/py_38/lib/python3.8/unittest/case.py:202: in handle
    callable_obj(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def load_vars(path, vars):
        """Load variables from a pickle file.
    
        Arguments:
    
          * path: the path to the pickle file.
          * vars: a list of variable names.
    
        Returns:
    
          * cache: a dictionary {var_name: var_value}.
    
        """
        with open(path, 'rb') as f:
            # Load the variables from the cache.
            try:
                cache = pickle.load(f)
            except EOFError as e:
                cache={}
                #raise IOError(str(e))
    
            # Create a clean result dict with only requested variables
            result = {}
    
            # Check that all requested variables could be loaded successfully
>           missing_vars = sorted(set(vars) - set(cache.keys()))
E           AttributeError: 'int' object has no attribute 'keys'

ipycache.py:128: AttributeError
----------------------------- Captured stdout call -----------------------------
Linux be4955f5d031 5.4.143.bsk.8-amd64 #5.4.143.bsk.8 SMP Debian 5.4.143.bsk.8 Wed Jul 20 08:43:36 UTC  x86_64 x86_64 x86_64 GNU/Linux
=========================== short test summary info ============================
FAILED test_ipycache.py::test_load_exploitPickle - AttributeError: 'int' obje...
================ 1 failed, 10 deselected, 16 warnings in 0.63s =================

------------------------------ Finish Evaluation ------------------------------


[UnitTest RESULT]: None
[UnitTest MSG]:
 None

[Validation TYPE]: validation_fail