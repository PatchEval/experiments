--- a/git/repo/base.py
+++ b/git/repo/base.py
@@ -1169,6 +1169,20 @@
         return cls(path, odbt=odbt)
 
     @classmethod
+    @staticmethod
+    def _check_unsafe_options(options: Optional[List[str]], unsafe_options: List[str]) -> None:
+        """Check for unsafe options in the provided list of options.
+        
+        :raise ValueError: If any unsafe option is found.
+        """
+        if not options:
+            return
+            
+        option_str = " ".join(options)
+        for unsafe_opt in unsafe_options:
+            if unsafe_opt in option_str:
+                raise ValueError(f"Unsafe option '{unsafe_opt}' is not allowed")
+
     def _clone(
         cls,
         git: "Git",
@@ -1201,10 +1215,18 @@
         if multi_options:
             multi = shlex.split(" ".join(multi_options))
 
+        # Check for unsafe protocols
         if not allow_unsafe_protocols:
             Git.check_unsafe_protocols(str(url))
-        if not allow_unsafe_options and multi_options:
-            Git.check_unsafe_options(options=multi_options, unsafe_options=cls.unsafe_git_clone_options)
+            
+        # Check for unsafe options in both multi_options and regular kwargs
+        if not allow_unsafe_options:
+            if multi_options:
+                Git.check_unsafe_options(options=multi_options, unsafe_options=cls.unsafe_git_clone_options)
+                
+            # Check for unsafe options in regular kwargs
+            option_list = [f"--{k}" for k in kwargs if k.startswith('_')] + list(kwargs.values())
+            cls._check_unsafe_options(option_list, cls.unsafe_git_clone_options)
 
         proc = git.clone(
             multi,

