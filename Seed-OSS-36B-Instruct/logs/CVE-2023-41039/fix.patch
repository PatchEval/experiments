--- a/src/RestrictedPython/Guards.py
+++ b/src/RestrictedPython/Guards.py
@@ -240,15 +240,18 @@
 
 
 def safer_getattr(object, name, default=None, getattr=getattr):
-    """Getattr implementation which prevents using format on string objects.
-
-    format() is considered harmful:
+    """Getattr implementation which prevents using format methods on string objects.
+
+    format() and format_map() are considered harmful:
     http://lucumr.pocoo.org/2016/12/29/careful-with-str-format/
 
     """
-    if isinstance(object, str) and name == 'format':
+    if isinstance(object, str) and name in ('format', 'format_map'):
         raise NotImplementedError(
-            'Using format() on a %s is not safe.' % object.__class__.__name__)
+            'Using {name}() on a {cls} is not safe.'.format(
+                name=name, cls=object.__class__.__name__
+            )
+        )
     if name.startswith('_'):
         raise AttributeError(
             '"{name}" is an invalid attribute name because it '

--- a/src/RestrictedPython/Utilities.py
+++ b/src/RestrictedPython/Utilities.py
@@ -14,11 +14,17 @@
 import math
 import random
 import string
+import types
 
 
 utility_builtins = {}
 
-utility_builtins['string'] = string
+# Create a safe string module without Formatter class
+safe_string = types.ModuleType('string')
+safe_string.__dict__.update(string.__dict__)
+if 'Formatter' in safe_string.__dict__:
+    del safe_string.__dict__['Formatter']
+utility_builtins['string'] = safe_string
 utility_builtins['math'] = math
 utility_builtins['random'] = random
 utility_builtins['whrandom'] = random

