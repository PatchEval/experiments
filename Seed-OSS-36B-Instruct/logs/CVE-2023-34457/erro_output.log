[PoC RESULT]: False
[PoC MSG]:
============================== Run PoC ==============================
------------------------------ Standard Output ------------------------------
============================= test session starts ==============================
platform linux -- Python 3.9.23, pytest-8.4.1, pluggy-1.6.0 -- /workspace/PoC_env/CVE-2023-34457/bin/python
cachedir: .pytest_cache
rootdir: /workspace/MechanicalSoup
configfile: setup.cfg
plugins: httpbin-2.1.0, flake8-1.3.0, requests-mock-1.12.1, cov-6.2.1
collecting ... collected 15 items

tests/test_browser.py::test_enctype_and_file_submit[multipart/form-data-True-<input name="pic" type="file" />] FAILED [  6%]
tests/test_browser.py::test_enctype_and_file_submit[multipart/form-data-True-] PASSED [ 13%]
tests/test_browser.py::test_enctype_and_file_submit[multipart/form-data-False-<input name="pic" type="file" />] PASSED [ 20%]
tests/test_browser.py::test_enctype_and_file_submit[multipart/form-data-False-] PASSED [ 26%]
tests/test_browser.py::test_enctype_and_file_submit[application/x-www-form-urlencoded-True-<input name="pic" type="file" />] FAILED [ 33%]
tests/test_browser.py::test_enctype_and_file_submit[application/x-www-form-urlencoded-True-] PASSED [ 40%]
tests/test_browser.py::test_enctype_and_file_submit[application/x-www-form-urlencoded-False-<input name="pic" type="file" />] PASSED [ 46%]
tests/test_browser.py::test_enctype_and_file_submit[application/x-www-form-urlencoded-False-] PASSED [ 53%]
tests/test_browser.py::test_enctype_and_file_submit[Invalid enctype-True-<input name="pic" type="file" />] FAILED [ 60%]
tests/test_browser.py::test_enctype_and_file_submit[Invalid enctype-True-] PASSED [ 66%]
tests/test_browser.py::test_enctype_and_file_submit[Invalid enctype-False-<input name="pic" type="file" />] PASSED [ 73%]
tests/test_browser.py::test_enctype_and_file_submit[Invalid enctype-False-] PASSED [ 80%]
tests/test_stateful_browser.py::test_upload_file_with_malicious_default PASSED [ 86%]
tests/test_stateful_browser.py::test_upload_file FAILED                  [ 93%]
tests/test_stateful_browser.py::test_upload_file_raise_on_string_input FAILED [100%]

=================================== FAILURES ===================================
_ test_enctype_and_file_submit[multipart/form-data-True-<input name="pic" type="file" />] _

httpbin = <pytest_httpbin.serve.Server object at 0x7f0a20eaa4f0>
enctype = 'multipart/form-data', submit_file = True
file_field = '<input name="pic" type="file" />'

    @pytest.mark.parametrize("file_field", [
      """<input name="pic" type="file" />""",
      ""])
    @pytest.mark.parametrize("submit_file", [
        True,
        False
    ])
    @pytest.mark.parametrize("enctype", [
      pytest.param("multipart/form-data"),
      pytest.param("application/x-www-form-urlencoded"),
      pytest.param("Invalid enctype")
    ])
    def test_enctype_and_file_submit(httpbin, enctype, submit_file, file_field):
        # test if enctype is respected when specified
        # and if files are processed correctly
        form_html = f"""
        <form method="post" action="{httpbin.url}/post" enctype="{enctype}">
          <input name="in" value="test" />
          {file_field}
        </form>
        """
        form = BeautifulSoup(form_html, "lxml").form
    
        valid_enctype = (enctype in valid_enctypes_file_submit and
                         valid_enctypes_file_submit[enctype])
        expected_content = b""  # default
        if submit_file and file_field:
            # create a temporary file for testing file upload
            file_content = b":-)"
            pic_filedescriptor, pic_path = tempfile.mkstemp()
            pic_filename = os.path.basename(pic_path)
            os.write(pic_filedescriptor, file_content)
            os.close(pic_filedescriptor)
            if valid_enctype:
                # Correct encoding => send the content
                expected_content = file_content
            else:
                # Encoding doesn't allow sending the content, we expect
                # the filename as a normal text field.
                expected_content = os.path.basename(pic_path.encode())
            tag = form.find("input", {"name": "pic"})
            tag["value"] = open(pic_path, "rb")
    
        browser = mechanicalsoup.Browser()
>       response = browser._request(form)

tests/test_browser.py:172: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
mechanicalsoup/browser.py:297: in _request
    request_kwargs = Browser.get_request_kwargs(form, url, **kwargs)
mechanicalsoup/browser.py:237: in get_request_kwargs
    filename = os.path.basename(filepath)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

p = <_io.BufferedReader name='/tmp/tmp74k9wh3p'>

    def basename(p):
        """Returns the final component of a pathname"""
>       p = os.fspath(p)
E       TypeError: expected str, bytes or os.PathLike object, not BufferedReader

/root/miniconda3/envs/py39/lib/python3.9/posixpath.py:142: TypeError
_ test_enctype_and_file_submit[application/x-www-form-urlencoded-True-<input name="pic" type="file" />] _

httpbin = <pytest_httpbin.serve.Server object at 0x7f0a20eaa4f0>
enctype = 'application/x-www-form-urlencoded', submit_file = True
file_field = '<input name="pic" type="file" />'

    @pytest.mark.parametrize("file_field", [
      """<input name="pic" type="file" />""",
      ""])
    @pytest.mark.parametrize("submit_file", [
        True,
        False
    ])
    @pytest.mark.parametrize("enctype", [
      pytest.param("multipart/form-data"),
      pytest.param("application/x-www-form-urlencoded"),
      pytest.param("Invalid enctype")
    ])
    def test_enctype_and_file_submit(httpbin, enctype, submit_file, file_field):
        # test if enctype is respected when specified
        # and if files are processed correctly
        form_html = f"""
        <form method="post" action="{httpbin.url}/post" enctype="{enctype}">
          <input name="in" value="test" />
          {file_field}
        </form>
        """
        form = BeautifulSoup(form_html, "lxml").form
    
        valid_enctype = (enctype in valid_enctypes_file_submit and
                         valid_enctypes_file_submit[enctype])
        expected_content = b""  # default
        if submit_file and file_field:
            # create a temporary file for testing file upload
            file_content = b":-)"
            pic_filedescriptor, pic_path = tempfile.mkstemp()
            pic_filename = os.path.basename(pic_path)
            os.write(pic_filedescriptor, file_content)
            os.close(pic_filedescriptor)
            if valid_enctype:
                # Correct encoding => send the content
                expected_content = file_content
            else:
                # Encoding doesn't allow sending the content, we expect
                # the filename as a normal text field.
                expected_content = os.path.basename(pic_path.encode())
            tag = form.find("input", {"name": "pic"})
            tag["value"] = open(pic_path, "rb")
    
        browser = mechanicalsoup.Browser()
        response = browser._request(form)
    
        if enctype not in valid_enctypes_file_submit:
            expected_enctype = default_enctype
        else:
            expected_enctype = enctype
        assert expected_enctype in response.request.headers["Content-Type"]
    
        resp = response.json()
        assert resp["form"]["in"] == "test"
    
        found = False
        found_in = None
    
        for key, value in resp.items():
            if value:
                if "pic" in value:
                    content = value["pic"].encode()
                    assert not found
                    assert key in ("files", "form")
                    found = True
                    found_in = key
                if key == "files" and not valid_enctype:
                    assert not value
    
        assert found == bool(file_field)
        if file_field:
>           assert content == expected_content
E           AssertionError: assert b':-)' == b'tmpjelo9d08'
E             
E             At index 0 diff: b':' != b't'
E             
E             Full diff:
E             - (b'tmpjelo9d08')
E             + b':-)'

tests/test_browser.py:199: AssertionError
----------------------------- Captured stderr call -----------------------------
127.0.0.1 - - [30/Oct/2025 12:33:51] "POST /post HTTP/1.1" 200 389
_ test_enctype_and_file_submit[Invalid enctype-True-<input name="pic" type="file" />] _

httpbin = <pytest_httpbin.serve.Server object at 0x7f0a20eaa4f0>
enctype = 'Invalid enctype', submit_file = True
file_field = '<input name="pic" type="file" />'

    @pytest.mark.parametrize("file_field", [
      """<input name="pic" type="file" />""",
      ""])
    @pytest.mark.parametrize("submit_file", [
        True,
        False
    ])
    @pytest.mark.parametrize("enctype", [
      pytest.param("multipart/form-data"),
      pytest.param("application/x-www-form-urlencoded"),
      pytest.param("Invalid enctype")
    ])
    def test_enctype_and_file_submit(httpbin, enctype, submit_file, file_field):
        # test if enctype is respected when specified
        # and if files are processed correctly
        form_html = f"""
        <form method="post" action="{httpbin.url}/post" enctype="{enctype}">
          <input name="in" value="test" />
          {file_field}
        </form>
        """
        form = BeautifulSoup(form_html, "lxml").form
    
        valid_enctype = (enctype in valid_enctypes_file_submit and
                         valid_enctypes_file_submit[enctype])
        expected_content = b""  # default
        if submit_file and file_field:
            # create a temporary file for testing file upload
            file_content = b":-)"
            pic_filedescriptor, pic_path = tempfile.mkstemp()
            pic_filename = os.path.basename(pic_path)
            os.write(pic_filedescriptor, file_content)
            os.close(pic_filedescriptor)
            if valid_enctype:
                # Correct encoding => send the content
                expected_content = file_content
            else:
                # Encoding doesn't allow sending the content, we expect
                # the filename as a normal text field.
                expected_content = os.path.basename(pic_path.encode())
            tag = form.find("input", {"name": "pic"})
            tag["value"] = open(pic_path, "rb")
    
        browser = mechanicalsoup.Browser()
        response = browser._request(form)
    
        if enctype not in valid_enctypes_file_submit:
            expected_enctype = default_enctype
        else:
            expected_enctype = enctype
        assert expected_enctype in response.request.headers["Content-Type"]
    
        resp = response.json()
        assert resp["form"]["in"] == "test"
    
        found = False
        found_in = None
    
        for key, value in resp.items():
            if value:
                if "pic" in value:
                    content = value["pic"].encode()
                    assert not found
                    assert key in ("files", "form")
                    found = True
                    found_in = key
                if key == "files" and not valid_enctype:
                    assert not value
    
        assert found == bool(file_field)
        if file_field:
>           assert content == expected_content
E           AssertionError: assert b':-)' == b'tmp1rh5v6q9'
E             
E             At index 0 diff: b':' != b't'
E             
E             Full diff:
E             - (b'tmp1rh5v6q9')
E             + b':-)'

tests/test_browser.py:199: AssertionError
----------------------------- Captured stderr call -----------------------------
127.0.0.1 - - [30/Oct/2025 12:33:51] "POST /post HTTP/1.1" 200 389
_______________________________ test_upload_file _______________________________

httpbin = <pytest_httpbin.serve.Server object at 0x7f0a20eaa4f0>

    def test_upload_file(httpbin):
        browser = mechanicalsoup.StatefulBrowser()
        url = httpbin + "/post"
        file_input_form = f"""
        <form method="post" action="{url}" enctype="multipart/form-data">
            <input type="file" name="first" />
        </form>
        """
    
        # Create two temporary files to upload
        def make_file(content):
            path = tempfile.mkstemp()[1]
            with open(path, "w") as fd:
                fd.write(content)
            return path
        path1 = make_file("first file content")
        path2 = make_file("second file content")
    
        value1 = open(path1, "rb")
        value2 = open(path2, "rb")
    
        browser.open_fake_page(file_input_form)
        browser.select_form()
    
        # Test filling an existing input and creating a new input
        browser["first"] = value1
        browser.new_control("file", "second", value2)
    
>       response = browser.submit_selected()

tests/test_stateful_browser.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
mechanicalsoup/stateful_browser.py:286: in submit_selected
    resp = self.submit(self.__state.form, url=self.__state.url,
mechanicalsoup/browser.py:321: in submit
    response = self._request(form, url, **kwargs)
mechanicalsoup/browser.py:297: in _request
    request_kwargs = Browser.get_request_kwargs(form, url, **kwargs)
mechanicalsoup/browser.py:237: in get_request_kwargs
    filename = os.path.basename(filepath)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

p = <_io.BufferedReader name='/tmp/tmpe5nuilis'>

    def basename(p):
        """Returns the final component of a pathname"""
>       p = os.fspath(p)
E       TypeError: expected str, bytes or os.PathLike object, not BufferedReader

/root/miniconda3/envs/py39/lib/python3.9/posixpath.py:142: TypeError
____________________ test_upload_file_raise_on_string_input ____________________

    def test_upload_file_raise_on_string_input():
        """Check for use of the file upload API that was modified to remediate
        CVE-2023-34457. Users must now open files manually to upload them.
        """
        browser = mechanicalsoup.StatefulBrowser()
        file_input_form = """
        <form enctype="multipart/form-data">
            <input type="file" name="upload" />
        </form>
        """
        browser.open_fake_page(file_input_form)
        browser.select_form()
        with pytest.raises(ValueError, match="CVE-2023-34457"):
>           browser["upload"] = "/path/to/file"
E           Failed: DID NOT RAISE <class 'ValueError'>

tests/test_stateful_browser.py:460: Failed
=============================== warnings summary ===============================
../PoC_env/CVE-2023-34457/lib/python3.9/site-packages/coverage/core.py:97
  /workspace/PoC_env/CVE-2023-34457/lib/python3.9/site-packages/coverage/core.py:97: CoverageWarning: Couldn't import C tracer: No module named 'coverage.tracer' (no-ctracer)
    warn(f"Couldn't import C tracer: {IMPORT_ERROR}", slug="no-ctracer", once=True)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================================ tests coverage ================================
_______________ coverage: platform linux, python 3.9.23-final-0 ________________

Name                                 Stmts   Miss  Cover
--------------------------------------------------------
mechanicalsoup/browser.py              149     57    62%
mechanicalsoup/form.py                 155     90    42%
mechanicalsoup/stateful_browser.py     158     82    48%
mechanicalsoup/utils.py                  2      0   100%
--------------------------------------------------------
TOTAL                                  464    229    51%
=========================== short test summary info ============================
FAILED tests/test_browser.py::test_enctype_and_file_submit[multipart/form-data-True-<input name="pic" type="file" />]
FAILED tests/test_browser.py::test_enctype_and_file_submit[application/x-www-form-urlencoded-True-<input name="pic" type="file" />]
FAILED tests/test_browser.py::test_enctype_and_file_submit[Invalid enctype-True-<input name="pic" type="file" />]
FAILED tests/test_stateful_browser.py::test_upload_file - TypeError: expected...
FAILED tests/test_stateful_browser.py::test_upload_file_raise_on_string_input
=================== 5 failed, 10 passed, 1 warning in 2.38s ====================

------------------------------ Standard Error ------------------------------
127.0.0.1 - - [30/Oct/2025 12:33:51] "POST /post HTTP/1.1" 200 407
127.0.0.1 - - [30/Oct/2025 12:33:51] "POST /post HTTP/1.1" 200 386
127.0.0.1 - - [30/Oct/2025 12:33:51] "POST /post HTTP/1.1" 200 410

------------------------------ Finish Evaluation ------------------------------


[UnitTest RESULT]: None
[UnitTest MSG]:
 None

[Validation TYPE]: validation_fail