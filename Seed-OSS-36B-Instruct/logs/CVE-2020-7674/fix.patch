--- a/lib/encode.js
+++ b/lib/encode.js
@@ -1,9 +1,48 @@
 'use strict';
 
-function template(literal, data) {
-  var tmpl = literal.replace(/(\$\{)/gm, '$1data.');
+function replacePlaceholders(str, data) {
+  return str.replace(/\${([^}]+)}/g, (match, key) => {
+    const parts = key.split('.');
+    let value = data;
+    for (const part of parts) {
+      if (value == null || typeof value !== 'object' || !(part in value)) {
+        return match;
+      }
+      value = value[part];
+    }
+    return value !== undefined ? value : match;
+  });
+}
 
-  return eval('`' + tmpl + '`');
+function processObject(obj, data) {
+  if (Array.isArray(obj)) {
+    return obj.map(item => {
+      if (item === undefined) {
+        return null;
+      } else if (typeof item === 'object' && item !== null) {
+        return processObject(item, data);
+      } else {
+        return item;
+      }
+    });
+  }
+
+  const result = {};
+  for (const [key, value] of Object.entries(obj)) {
+    if (value === undefined || typeof value === 'function') {
+      continue;
+    }
+
+    if (typeof value === 'string') {
+      result[key] = replacePlaceholders(value, data);
+    } else if (typeof value === 'object' && value !== null) {
+      result[key] = processObject(value, data);
+    } else {
+      result[key] = value;
+    }
+  }
+
+  return result;
 }
 
 function encodeStatements(statements, data) {
@@ -15,8 +54,7 @@
     return statements;
   }
 
-  var output = template(JSON.stringify(statements), data);
-  output = JSON.parse(output);
+  const output = processObject(statements, data);
 
   Object.defineProperty(output, 'encoded', {
     __proto__: null,

