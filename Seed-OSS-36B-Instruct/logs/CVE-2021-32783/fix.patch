--- a/internal/dag/accessors.go
+++ b/internal/dag/accessors.go
@@ -55,6 +55,14 @@
 	svc, svcPort, err := cache.LookupService(meta, port)
 	if err != nil {
 		return nil, err
+	}
+
+	// Validate ExternalName services to prevent access to restricted resources like Envoy admin interface
+	if svc.Spec.Type == v1.ServiceTypeExternalName {
+		if isRestrictedExternalName(svc.Spec.ExternalName) {
+			return nil, fmt.Errorf("service %q in namespace %q uses restricted external name %q that could access Envoy admin interface", 
+				svc.Name, svc.Namespace, svc.Spec.ExternalName)
+		}
 	}
 
 	if dagSvc := dag.GetService(k8s.NamespacedNameOf(svc), svcPort.Port); dagSvc != nil {
@@ -78,6 +86,26 @@
 	return dagSvc, nil
 }
 
+// isRestrictedExternalName checks if an external name references a restricted resource
+// that could be used to access Envoy's admin interface or other local services
+func isRestrictedExternalName(name string) bool {
+	// Block common local addresses that could access Envoy admin interface
+	restrictedPatterns := []string{
+		"127.0.0.1",      // Localhost IPv4
+		"::1",            // Localhost IPv6
+		"localhost",      // Localhost hostname
+		"envoy",          // Common Envoy container name
+		"envoy-admin",    // Explicit admin interface reference
+	}
+
+	for _, pattern := range restrictedPatterns {
+		if name == pattern {
+			return true
+		}
+	}
+	return false
+}
+
 func upstreamProtocol(svc *v1.Service, port v1.ServicePort) string {
 	up := annotation.ParseUpstreamProtocols(svc.Annotations)
 	protocol := up[port.Name]

